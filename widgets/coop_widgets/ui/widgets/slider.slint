// SPDX-FileCopyrightText: 2022 Florian Blasius <co-sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Duration, Size, State, Radius, Palette } from "../styling/styling.slint";
import { FocusBorder } from "../components/focus-border.slint";
import { SmallLabel } from "../components/label.slint";
import { Switch } from "../widgets/checkables.slint";

export component Slider {
    callback changed(/* value */ float);

    in property <bool> enabled <=> i-touch-area.enabled;
    in property<float> maximum: 100;
    in property<float> minimum;
    out property <bool> has-focus <=> i-focus-scope.has-focus;
    in-out property <float> value;

    min-width: Size.large;
    min-height: Size.small;
    horizontal-stretch: 1;
    vertical-stretch: 0;

    accessible-role: slider;
    accessible-value: root.value;
    accessible-value-minimum: root.minimum;
    accessible-value-maximum: root.maximum;
    accessible-value-step: (root.maximum - root.minimum) / 100;

    i-background := Rectangle {
        y: (parent.height - self.height) / 2;
        width: 100%;
        height: Size.extra-extra-small;
        background: Palette.surface;
        border-radius: Radius.extra-extra-small;

        animate background { duration: Duration.fast; }
    }

    i-track := Rectangle {
        x: 0;
        y: (parent.height - self.height) / 2;
        width: i-thumb.x + (i-thumb.width / 2);
        height: i-background.height;
        background: Palette.primary;
        border-radius: i-background.border-radius;

        animate background { duration: Duration.fast; }
    }

    i-thumb := Rectangle {
        x: (parent.width - self.width) * (root.value - root.minimum) / (root.maximum - root.minimum);
        y: (parent.height - self.height) / 2;
        width: Size.small;
        height: self.width;
        border-radius: max(self.width, self.height) / 2;
        background: Palette.primary;

        animate background, width { duration: Duration.fast; }
    }

    i-touch-area := TouchArea {
        property <float> pressed-value;
        property <float> step-size: (root.maximum - root.minimum) / 100;

        width: parent.width;
        height: parent.height;

        pointer-event(event) => {
            if(event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                self.pressed-value = root.value;
            }
        }

        moved => {
            if(self.enabled && self.pressed) {
                root.value = max(root.minimum, min(root.maximum,
                    self.pressed-value + (i-touch-area.mouse-x - i-touch-area.pressed-x) * (root.maximum - root.minimum) / (root.width - i-thumb.width)));
                root.changed(root.value);
            }
        }
    }

    i-focus-scope := FocusScope {
        x:0;
        width: 0px;
        enabled: root.enabled;

        key-pressed(event) => {
            if(self.enabled && event.text == Key.RightArrow) {
                root.value = Math.min(root.value + i-touch-area.step-size, root.maximum);
                root.changed(root.value);
                accept
            } else if(self.enabled && event.text == Key.LeftArrow) {
                root.value = Math.max(root.value - i-touch-area.step-size, root.minimum);
                root.changed(root.value);
                accept
            } else {
                reject
            }
        }
    }

    if (i-focus-scope.has-focus) : FocusBorder {
        width: root.width + 4px;
        height: root.height + 4px;
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        border-radius: i-background.border-radius + 2px;
    }

    states [
        disabled when !root.enabled: {
            i-background.background: Palette.surface-disabled;
            i-track.background: Palette.foreground-disabled;
            i-thumb.background: Palette.foreground-disabled;
        }
        pressed when i-touch-area.pressed: {
            i-thumb.background: Palette.primary.darker(State.pressed);
            i-thumb.width: Size.small * 0.96;
        }
        hover when i-touch-area.has-hover: {
            i-thumb.background: Palette.primary.darker(State.hover);

        }
    ]
}