// SPDX-FileCopyrightText: 2022 Florian Blasius <co_sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Theme, Icons } from "../coop/theme.slint";
import { MediumLabel } from "../components/label.slint";
import { ScrollView } from "../widgets/scroll_view.slint";
import { TextLine } from "../widgets/text_line.slint";
import { Spacer } from "../layouts/spacer.slint";
import { Icon } from "../components/icon.slint";

// `Column` defines a column with header for the `TableViewView`.
export struct Column  {
    // Defines the header text of the column.
    header: string,

    // Defines the minimum width of the column.
    min_width: length,

    // Defines the horizontal stretch of the column.
    horizontal_stretch: int,
}

// `Cell` defines a single cell in the `TableView`.
export struct Cell  {
    // Defines the type of the cell, 0 is text and 1 is icon.
    type: int,

    // Defines the value of the string, type is depending on the `type` property.
    value: string,

    // If `type` is 0 and `edititable` is `true` a `TextLine` will be displayed to change the text.
    editable: bool,

    // If set to `true` the content of the cell will displayed in the `primary` brush.
    highlighted: bool,
}

component CellTemplate inherits Rectangle {
    callback accepted(string);

    in-out property <Cell> cell;

    vertical_stretch: 0;
                  
    if(root.cell.type == 0 && !root.cell.editable) : MediumLabel {  
        x:0;  
        width: 90%;
        height: 100%;
        text: root.cell.value;
        vertical-alignment: center;
        color: root.cell.highlighted ? Theme.brushes.primary : Theme.brushes.foreground;
    }

    if(root.cell.type == 0 && root.cell.editable) : TextLine {  
        x:0;  
        y: (parent.height - self.height) / 2;
        width: 90%;
        height: 80%;
        text: root.cell.value;
        accepted => {
            root.accepted(self.text);
        }
        init => { 
            self.focus_input(); 
        }
    }

    if(root.cell.type == 1) : Icon {  
        x:0;  
        y: (parent.height - self.height) / 2;
        text: root.cell.value;
        color: root.cell.highlighted ? Theme.brushes.primary : Theme.brushes.foreground;
        font_size:  Theme.icon.size.medium;
    }
}

component RowTemplate inherits Rectangle {
    callback pointer_event <=> i_touch_area.pointer_event;
    callback clicked <=> i_touch_area.clicked;
    callback accepted(int, string);

    private property <brush> foreground: Theme.brushes.foreground;
    in property <int> index;
    in property <[Cell]> cell_row;
    in property <length> cell_height: Theme.sizes.medium;
    in property <[Column]> columns;

    i_touch_area := TouchArea {}

    HorizontalLayout {
        padding_left: Theme.spaces.large;
        padding_right: Theme.spaces.large;
        for cell[index] in root.cell_row : CellTemplate {
            horizontal_stretch: root.columns[index].horizontal_stretch;
            min_width: root.columns[index].min_width;
            cell: cell;
            accepted(text) => {  
                root.accepted(index, text);
            }
        }
    }

    states [
        pressed when i_touch_area.pressed: {
            background: Theme.brushes.background.darker(Theme.state.pressed);
        }
        hover when i_touch_area.has_hover: {
            background: Theme.brushes.background.darker(Theme.state.hover);
        }
    ]
}

// `TableView` is used to display data in columns and rows.
export component TableView inherits Rectangle {
    // Received when a button was pressed or released on a row.
    callback row_pointer_event(PointerEvent, int);

    // Emitted when clicked on a row (the mouse is pressed, then released on this element).
    callback row_clicked(int);

    // Emitted when enter key on cell is pressed.
    callback accepted(int, int, string);

    // Defines the columns and column headers.
    in property <[Column]> columns;

    // Defines the rows and cells of the table.
    in property <[[Cell]]> rows;

    // Defines the height of the header row.
    in property <length> header_height: Theme.sizes.medium;

    // Defines the height of all cells.
    in property <length> cell_height: Theme.sizes.medium;

    VerticalLayout {  
        HorizontalLayout {  
            vertical_stretch: 0;
            padding_left: Theme.spaces.large;
            padding_right: Theme.spaces.large;

            for column in root.columns : Rectangle {
                min_width: column.min_width;
                height: root.header_height;
                horizontal_stretch: column.horizontal_stretch;

                MediumLabel {  
                    x:0;  
                    height: 100%;
                    text: column.header;
                    vertical-alignment: center;
                }
            }
        }

        ScrollView {
            vertical_stretch: 1;

            VerticalLayout {  
                for row[index] in root.rows : RowTemplate {
                    columns: root.columns;
                    height: root.cell_height;
                    cell_row: row;

                    pointer_event(e) => { 
                        root.row_pointer_event(e, index);
                    }

                    clicked => { 
                        root.row_clicked(index);
                    }

                    accepted(cell_index, text) => {
                        root.accepted(index, cell_index, text);
                    }
                }
    
                Spacer {}
            }
        }  
    }
}