// SPDX-FileCopyrightText: 2022 Florian Blasius <co_sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Theme, Icons } from "../coop/theme.slint";
import { FocusBorder } from "../components/focus_border.slint";
import {  Icon } from "../components/icon.slint";
import { Popup } from "../components/popup.slint";
import { LargeLabel } from "../components/label.slint";
import { List, GroupItemModel, ItemModel } from "../widgets/list.slint";

// `ComboBox` enables users to select a value from a list inside of a `Popuup`.
export component ComboBox {
    // Is called after current index is changed.
    callback current_changed(int);

    // If set to `false` the widget is disabled.
    in property <bool> enabled: true;

    // Defines the list model of the combo box.
    in property <[ItemModel]> model;

    // Defines a text that is diplayed if no item is selected.
    in property <string> placeholder: "placeholder";

    // Represents the curren selected item. If there is no selection the current item is empty.
    out property <ItemModel> current_item: root.current_index < 0 || root.current_index > root.model.length ? {}: root.model[root.current_index];

    // Defines the index of the current selected item.
    in-out property <int> current_index: -1;
   
    accessible-role: combobox;
    accessible-value: root.current_index;

    min_width: Theme.sizes.large;
    min_height: Theme.sizes.medium;
    horizontal-stretch: 1;
    vertical-stretch: 0;

    i_container := Rectangle {
        property <brush> foreground: Theme.brushes.foreground;

        border_radius: Theme.radius.small;
        background: Theme.brushes.surface;

        HorizontalLayout {  
            padding_left: Theme.spaces.medium;
            padding_right: Theme.spaces.medium;
            spacing: Theme.spaces.small;     

            if(root.current_index >= 0 && root.current_index < root.model.length) : LargeLabel {  
                vertical-alignment: center;
                text: root.model[root.current_index].text;
                color: i_container.foreground;
                overflow: elide;
                horizontal_stretch: 1;
                horizontal_alignment: left;
            }

            // placeholder
            if(root.current_index < 0) : LargeLabel {
                text <=> root.placeholder;
                vertical_alignment: center;
                color: Theme.brushes.border;
                horizontal_stretch: 1;
                horizontal_alignment: left;
                overflow: elide;
            }

            i_icon := Icon {
                color: i_container.foreground;
                font_size:  Theme.icon.size.medium;
                text: Icons.fa_var_caret_down;
                vertical_alignment: center;
            }
        }

        animate background { duration: Theme.durations.fast; }
        animate foreground { duration: Theme.durations.fast; }
    }

    i_touch_area := TouchArea {
        enabled: root.enabled;
        clicked => { i_popup.show(); }
    }

    i_focus_scope := FocusScope {
        x:0;
        width: 0px; // Do not react on clicks
        enabled <=> root.enabled;
        
        key-pressed(event) => {
            if((event.text == " " || event.text == "\n")) {
                i_touch_area.clicked();
                return accept;
            }
            
            return reject;
        }
    }

    if(i_focus_scope.has_focus) : FocusBorder {
        width: root.width + 4px;
        height: root.height + 4px;
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        border_radius: i_container.border_radius + 2px;
    }

    i_popup := Popup {
        x:0;
        y: i_container.y + i_container.height + Theme.spaces.small; 
        width: i_container.width;

        forward_focus: i_popup_focus_scope;

        HorizontalLayout {  
            padding: 1px;

            List {  
                property <GroupItemModel> inner_model: {
                    text: "",
                    items: root.model,
                };
    
                model: [ self.inner_model ];
                current-item: { parent: 0, item: root.current_index };
    
                current_item_changed(item) => {  
                    root.current_index = item.item;
                    root.current_changed(root.current_index);
                }
            }
        } 

        i_popup_focus_scope := FocusScope {
            x: 0;
            width: 0px; // Do not react on clicks
            enabled <=> root.enabled;
            
            key-pressed(event) => {
                if(event.text == Key.UpArrow) {
                    root.current_index = Math.max(root.current_index - 1, 0);
                    return accept;
                } else if(event.text == Key.DownArrow) {
                    root.current_index = Math.min(root.current_index + 1, root.model.length - 1);
                    return accept;
                } 
                
                return reject;
            }
        }
    }

    states [
        disabled when !root.enabled: {
            i_container.background: Theme.brushes.surface_disabled;
            i_container.foreground: Theme.brushes.foreground_disabled;
        }
        pressed when i_touch_area.pressed: {
            i_container.background:  Theme.brushes.surface.darker(Theme.state.pressed);
            i_icon.color: Theme.brushes.foreground.darker(Theme.state.pressed);
            i_container.foreground: Theme.brushes.foreground.darker(Theme.state.pressed);
        }
        hover when i_touch_area.has_hover: {
            i_container.background: Theme.brushes.surface.darker(Theme.state.hover);
            i_icon.color: Theme.brushes.foreground.darker(Theme.state.hover);
            i_container.foreground: Theme.brushes.foreground.darker(Theme.state.hover);
        }
    ]
}