// SPDX-FileCopyrightText: 2022 Florian Blasius <co-sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Size, Space, Radius, State, Palette } from "../styling.slint";
import { SelectionMode } from "../enums.slint";
import { ListViewItem } from "../structs.slint";
import { FocusBorder } from "../components.slint";
import { ItemDelegate } from "../delegates.slint";
import { ListView } from "list-view.slint";
import { ListViewExtension } from "../extensions.slint";

export component StandardListView  {
    private property <int> into-view-item;
    private property <length> item-height: i-list-view.viewport-height / self.model.length;
    private property <length> into-view-item-y: i-list-view.viewport-y + into-view-item * item-height;

    callback current-item-changed <=> i-list-view-extension.current-item-changed;
    callback item-pointer-event(/* index */ int, /* event */ PointerEvent, /* absolute mouse position */ Point);
    callback item-accepted(/* index */ int, /* text */ string);
    callback key-pressed(/* event */ KeyEvent) -> EventResult;
    callback drop-event <=> i-list-view-extension.drop-event;

    in property <[ListViewItem]> model;
    in property <SelectionMode> selection-mode <=> i-list-view-extension.selection-mode;
    in property <int> edit-item: -1;
    in property <bool> enabled <=> i-list-view.enabled;
    in property <bool> drag-drop-enabled <=> i-list-view-extension.drag-drop-enabled;
    out property <bool> has-focus: i-focus-scope.has-focus;
    in-out property <int> current-item <=> i-list-view-extension.current-item;

    forward-focus: i-focus-scope;
    min-width: Size.medium;
    min-height: root.min-width;
    horizontal-stretch: 1;
    vertical-stretch: 1;
    preferred-height: 100%;
    preferred-width: 100%;

    i-focus-scope := FocusScope {
        x: 0;
        width: 0;  // Do not react on clicks
        enabled: root.enabled;

        key-pressed(event) => {
            if (root.key-pressed(event) == accept) {
                return accept;
            }

            if (root.selection-mode != SelectionMode.Custom) {
                if (event.text == Key.UpArrow) {
                    root.set-current-item(root.current-item - 1);
                    return accept;
                } else if (event.text == Key.DownArrow) {
                    root.set-current-item(root.current-item + 1);
                    return accept;
                }
            }

            reject
        }
    }

    i-background := Rectangle {
        y: Space.small;
        height: parent.height - Space.small;
        border-radius: Radius.medium;
        width: 100%;

        i-list-view-extension := ListViewExtension {
            drag-ghost-height: Size.small;
            item-count: root.model.length;
            visible-width: i-list-view.visible-width;
            visible-height: i-list-view.visible-height;
            viewport-width <=> i-list-view.viewport-width;
            viewport-height <=> i-list-view.viewport-height;
            viewport-x <=> i-list-view.viewport-x;
            viewport-y <=> i-list-view.viewport-y;
            width: 100%;
            height: 100%;

            i-list-view := ListView {
                interactive: !root.drag-drop-enabled;

                for item[index] in root.model : ItemDelegate {
                    private property <bool> left-pressed;

                    height: self.min-height;
                    selected: (index == root.current-item && root.selection-mode == SelectionMode.Single)
                        || (item.selected && root.selection-mode == SelectionMode.Custom);
                    edit: index == root.edit-item;
                    leading-icon: item.leading-icon;
                    text: item.text;
                    trailing-icon: item.trailing-icon;
                    highlighted: item.highlighted;
                    has-drag-hover: i-list-view-extension.dragging && index == i-list-view-extension.drag-hover-index;

                    clicked => {
                        /// FIXME set current
                        set-current-item(index);
                    }

                    pointer-event(event) => {
                        if (event.kind == PointerEventKind.down && event.button == PointerEventButton.left) {
                            self.left-pressed = true;
                        } else {
                            self.left-pressed = false;
                        }

                        if (i-list-view-extension.dragging && event.kind == PointerEventKind.up && event.button == PointerEventButton.left) {
                            i-list-view-extension.drop();
                            return;
                        }

                        if (self.mouse-x < 0 || self.mouse-y < 0 || self.mouse-x > self.width || self.mouse-y > self.height) {
                            return;
                        }

                        root.item-pointer-event(index, event, {
                            x: self.absolute-position.x + self.mouse-x - root.absolute-position.x,
                            y: self.absolute-position.y + self.mouse-y - root.absolute-position.y,
                        });
                    }

                    accepted(text) => {
                        root.item-accepted(index, text);
                    }

                    moved => {
                        if (!root.drag-drop-enabled || (self.mouse-x - self.pressed-x == 0 && self.mouse-y - self.pressed-y == 0)) {
                            return;
                        }

                        if (!i-list-view-extension.dragging && self.left-pressed) {
                            i-list-view-extension.start-drag(index);
                        }

                        i-list-view-extension.update-drag-position(self.absolute-position.x + self.mouse-x - root.absolute-position.x,
                            self.absolute-position.y + self.mouse-y - root.absolute-position.y);
                    }
                }
            }

            Rectangle {
                width: 100%;
                height: 100%;
                clip: true;

                // drag ghost
                if (i-list-view-extension.dragging) : Rectangle {
                    x: i-list-view-extension.drag-position-x;
                    y: i-list-view-extension.drag-position-y;
                    width: i-list-view.width;
                    height: i-list-view-extension.drag-ghost-height;
                    background: Palette.background.darker(State.pressed);

                    ItemDelegate {
                        width: 100%;
                        height: 100%;
                        leading-icon: root.model[i-list-view-extension.drag-source].leading-icon;
                        text: root.model[i-list-view-extension.drag-source].text;
                        trailing-icon: root.model[i-list-view-extension.drag-source].trailing-icon;
                    }
                }
            }
        }

        @children
    }

    if (root.has-focus) : FocusBorder {
        width: 100%;
        height: 100%;
        border-radius: i-background.border-radius;
    }

    public function set-current-item(index: int) {
        i-list-view-extension.set-current-item(index);
    }

    public function bring-into-view(index: int) {
        i-list-view-extension.bring-into-view(index);
    }

    public function item-y(index: int) -> length {
        i-list-view-extension.item-y(index)
    }
}