// SPDX-FileCopyrightText: 2022 Florian Blasius <co-sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Size, Space, Radius } from "../styling.slint";
import { SelectionMode } from "../enums.slint";
import { ListViewItem } from "../structs.slint";
import { FocusBorder } from "../components.slint";
import { ItemDelegate } from "../delegates.slint";
import { ListView } from "list-view.slint";

export component StandardListView  {
    private property <int> into-view-item;
    private property <length> item-height: i-list-view.viewport-height / self.model.length;
    private property <length> into-view-item-y: i-list-view.viewport-y + into-view-item * item-height;

    callback current-item-changed(/* current-item */ int);
    callback item-pointer-event(/* item-row */ int, /* event */ PointerEvent, /* absolute mouse position */ Point);
    callback item-accepted(/* row */ int, /* text */ string);
    callback key-pressed(/* event */ KeyEvent) -> EventResult;

    in property <[ListViewItem]> model;
    in property <SelectionMode> selection-mode: SelectionMode.Single;
    in property <int> edit-item: -1;
    in property <bool> enabled <=> i-list-view.enabled;
    out property <bool> has-focus: i-focus-scope.has-focus;
    in-out property <int> current-item: -1;

    forward-focus: i-focus-scope;
    min-width: Size.medium;
    min-height: root.min-width;
    horizontal-stretch: 1;
    vertical-stretch: 1;
    preferred-height: 100%;
    preferred-width: 100%;

    i-focus-scope := FocusScope {
        x: 0;
        width: 0;  // Do not react on clicks
        enabled: root.enabled;

        key-pressed(event) => {
            if (root.key-pressed(event) == accept) {
                return accept;
            }

            if (root.selection-mode != SelectionMode.Custom) {
                if (event.text == Key.UpArrow) {
                    root.set-current-item(root.current-item - 1);
                    return accept;
                } else if (event.text == Key.DownArrow) {
                    root.set-current-item(root.current-item + 1);
                    return accept;
                }
            }

            reject
        }
    }

    i-background := Rectangle {
        y: Space.small;
        height: parent.height - Space.small;
        border-radius: Radius.medium;

        i-list-view := ListView {
            for item[index] in root.model : ItemDelegate {
                height: self.min-height;
                selected: (index == root.current-item && root.selection-mode == SelectionMode.Single)
                    || (item.selected && root.selection-mode == SelectionMode.Custom);
                edit: index == root.edit-item;
                leading-icon: item.leading-icon;
                text: item.text;
                trailing-icon: item.trailing-icon;
                highlighted: item.highlighted;

                clicked => {
                    set-current-item(index);
                }

                pointer-event(pe) => {
                    root.item-pointer-event(index, pe, {
                        x: self.absolute-position.x + self.mouse-x - root.absolute-position.x,
                        y: self.absolute-position.y + self.mouse-y - root.absolute-position.y,
                    });
                }

                accepted(text) => {
                    root.item-accepted(index, text);
                }
            }
        }

        @children
    }

    if (root.has-focus) : FocusBorder {
        width: 100%;
        height: 100%;
        border-radius: i-background.border-radius;
    }

    public function set-current-item(row: int) {
        if (row < 0 || row >= model.length || root.selection-mode == SelectionMode.None || root.selection-mode == SelectionMode.Custom) {
            return;
        }

        current-item = row;
        root.current-item-changed(current-item);
        bring-into-view(current-item);
    }

    public function bring-into-view(row: int) {
        into-view-item = row;

        if (into-view-item-y < 0) {
            i-list-view.viewport-y += 0 - into-view-item-y;
        }

        if (into-view-item-y + item-height > i-list-view.visible-height) {
            i-list-view.viewport-y -= into-view-item-y + item-height - i-list-view.visible-height;
        }
    }

    public function item-y(row: int) -> length {
        i-list-view.viewport-y + row * item-height + item-height / 2
    }
}