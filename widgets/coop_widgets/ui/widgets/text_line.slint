// SPDX-FileCopyrightText: 2022 Florian Blasius <co_sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Theme, Icons } from "../coop/theme.slint";
import { FocusBorder } from "../components/components.slint";
import {  Icon } from "../components/icon.slint";

component ActionButton inherits TouchArea {
    in property <string> icon <=> i_icon.text;

    width: i_icon.width;
    height: i_icon.height;

    i_icon := Icon {
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        font_size:  Theme.icon.size.small;
        color: Theme.brushes.border;
        text: Icons.fa_var_remove;
    }

    states [
        pressed when root.pressed: {
            i_icon.color: Theme.brushes.foreground.darker(Theme.state.pressed);
        }
        hover when root.has_hover: {
            i_icon.color: Theme.brushes.foreground.darker(Theme.state.hover);
        }
        disabled when !root.enabled: {
            i_icon.opacity: Theme.state.container_disabled;
        }
    ]
}

// `TextLine` is a single line text input widget.
export component TextLine {
    private property <length> computed_x;
    private property <length> padding-outer: i_layout.padding-left + i_layout.padding-right;

    // Is called after text is changed.
    callback edited <=> i_input.edited;
    
    // Is emmicalledted if the `TextLine` is clicked and `clickable` is set to `true`.
    callback clicked;

    // Is called after the action icon is clicked;
    callback action;

    // Focus the inner input.
    callback focus_input();

    //  Emitted when enter key is pressed.
    callback accepted <=> i_input.accepted;

    // Defines the icon that is displayed in front of the text.
    in property <string> icon <=> i_icon.text;

    // Defines a text that is displayed if text is empty.
    in property <string> placeholder: "placeholder";

    // Defines the icon of the action button.
    in property <string> action_icon;

    // If set to `true` the text cannot be selected or changed by keyboard input.
    in property read_only <=> i_input.read-only;

    // If set to `true` the widget can call the  `clicked` callback.
    in property <bool> clickable: Theme.settings.minimize;

    // The text line ca be used as text or password input.
    in property <InputType> input_type <=> i_input.input_type;

    // If set to `true` the text line will display an error border.
    in property <bool> has_error;

    // If set to false the widget is disabled.
    in property <bool> enabled <=> i_input.enabled;

    // The text that is displayed and can changed by text input.
    in-out property <string> text <=> i_input.text;

    min_width: !Theme.settings.minimize ? 168px: 80px;
    min_height: Theme.sizes.medium;
    forward-focus: i_input;
    horizontal-stretch: 1;
    vertical-stretch: 0;

    focus-input => {  
        i_input.focus();
    }

    i_container := Rectangle {
        border_radius: Theme.radius.small;
        background: Theme.brushes.surface;

        i_layout := HorizontalLayout {  
            padding_left: Theme.spaces.medium;
            padding_right: Theme.spaces.medium;
            spacing: Theme.spaces.small;
    
            i_icon := Icon {
                vertical_alignment: center;
                color: Theme.brushes.foreground;
            }
     
            Rectangle {  
                clip: true;
    
                i_input := TextInput {
                    visible: !Theme.settings.minimize;
                    x: min(0px, max(parent.width - self.width, root.computed_x));
                    width: max(parent.width, self.preferred-width);
                    height: 100%;
                    color: Theme.brushes.foreground;
                    vertical-alignment: center;
                    font_size: Theme.typo.medium_label.size;
                    font_weight: Theme.typo.medium_label.weight;
                    // font_family: Theme.typo.medium_label.family;
        
                    cursor-position-changed(cpos) => {
                        if(cpos.x + root.computed_x < root.padding_outer) {
                            root.computed_x = - cpos.x + root.padding_outer;
                        } else if(cpos.x + root.computed_x > parent.width - root.padding_outer) {
                            root.computed_x = parent.width - cpos.x - root.padding_outer;
                        }
                    }
                } 
    
                // helper text to display on embedded platforms
                if(Theme.embedded_helper) : Text {
                    text <=> root.text;
                    vertical-alignment: center;
                    x: min(0px, max(parent.width - self.width, root.computed_x));
                    width: max(parent.width, self.preferred-width);
                    y: (parent.height - self.height) / 2;
                    color: Theme.brushes.foreground;
                    opacity: i_input.opacity;
                    font_size: Theme.typo.medium_label.size;
                    font_weight: Theme.typo.medium_label.weight;
                    // font_family: Theme.typo.medium_label.family;
                }
    
                if(root.text == "") : Text {
                    x:0;
                    text <=> root.placeholder;
                    y: (parent.height - self.height) / 2;
                    color: Theme.brushes.border;
                    opacity: i_input.opacity;
                    font_size: Theme.typo.medium_label.size;
                    font_weight: Theme.typo.medium_label.weight;
                    // font_family: Theme.typo.medium_label.family;
                }
    
                if(root.clickable) : TouchArea {  
                    enabled <=> root.enabled;
                    width: 100%;
                    height: 100%;
                    clicked => { 
                        root.focus();
                        root.clicked();
                    }
                }
            }
    
            if(root.action_icon != "") : ActionButton {
                icon: root.action_icon;
                enabled: root.enabled;
                y: (parent.height - self.height) / 2;
                clicked => { root.action(); }
            }
        }
    }

    if(i_input.has_focus || root.has_error) : FocusBorder {
        width: root.width + 4px;
        height: root.height + 4px;
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        border_radius: i_container.border_radius + 2px;
        border_color: !root.has_error ? Theme.brushes.foreground : Theme.brushes.error;
    }

    states [
        disabled when !root.enabled: {
            i_container.opacity: Theme.state.container_disabled;
            i_input.opacity: Theme.state.content_disabled;
            i_icon.opacity: Theme.state.content_disabled;
        }
    ]
}