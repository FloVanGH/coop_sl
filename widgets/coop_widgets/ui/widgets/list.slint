// SPDX-FileCopyrightText: 2022 Florian Blasius <co_sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Theme, Icons } from "../coop/theme.slint";

import { ScrollView } from "scroll_view.slint";
import { SelectableBase } from "selectables.slint";
import { LargeLabel, FocusBorder } from "../components/components.slint";
import { Icon } from "../components/icon.slint";

// `ItemModel` represents a list item used by `List` and `ListView`.
export struct ItemModel  {
    // Defines the icon displayed left of the text.
    leading_icon: string,

    // Defines the text of the item.
    text: string,

    // Defines the icon displayed right of the text.
    trailing_icon: string,

    // If set to `true` the item will be displayed in a highlight color.
    highlighted: bool,
}

// `GroupItemModel` represents a list item with list item children used by `List` and `ListView`.
export struct GroupItemModel  {
    // Defines the text of the item.
    text: string,

    // Defines the list of children items.
    items: [ItemModel],
}

// Default item delegate (visuell represenation of an `ItemModel`.
component Item inherits TouchArea {
    private property <brush> foreground: Theme.brushes.foreground;
    private property <brush> icon_color: highlighted ? Theme.brushes.primary : Theme.brushes.foreground;

    in property <bool> highlighted;
    in property <string> leading_icon;
    in property <string> text;
    in property <string> trailing_icon;
    in property <int> index;
    in property <int> parent_index;
    in property <{ parent: int, item: int }> current_item;

    height: Theme.sizes.small;
    forward-focus: i_focus_scope;

    i_focus_scope := FocusScope {
        x:0;
        width: 0px; // Do not react on clicks

        key-pressed(event) => {
            if(event.text == " " || event.text == "\n") {
                root.clicked();
                return accept;
            }
            return reject;
        }
    }

    i_container := Rectangle {
       i_layout := HorizontalLayout {
            padding_left: root.padding_left;
            padding_right: root.padding_right;
            spacing: Theme.spaces.large;

            if(root.leading_icon != "") : Icon {
                text: root.leading_icon;
                color: root.icon_color;
                vertical_alignment: center;
                horizontal_alignment: left;
            }

            LargeLabel {
                text <=> root.text;
                vertical_alignment: center;
                horizontal_alignment: left;
                color: root.foreground;
                horizontal_stretch: 1;
            }

            if(root.trailing_icon != "") : Icon {
                text: root.trailing_icon;
                color: root.foreground;
                vertical_alignment: center;
            }
        }

        if(i_focus_scope.has_focus) : FocusBorder {}
    }

    states [
        pressed when root.pressed: {
            i_container.background: Theme.brushes.background.darker(Theme.state.pressed);
            foreground: Theme.brushes.foreground.darker(Theme.state.pressed);
            icon_color: highlighted ? Theme.brushes.primary.darker(Theme.state.pressed) : Theme.brushes.foreground.darker(Theme.state.pressed);
        }
        hover when root.has_hover: {
            i_container.background: Theme.brushes.background.darker(Theme.state.hover);
            foreground: Theme.brushes.foreground.darker(Theme.state.hover);
            icon_color: highlighted ? Theme.brushes.primary.darker(Theme.state.hover) : Theme.brushes.foreground.darker(Theme.state.hover);
        }
        selected when root.current_item.parent == root.parent_index && root.current_item.item == root.index: {
            i_container.background: Theme.brushes.background;
        }
    ]

    animate foreground { duration: Theme.durations.fast; }
}

// Delegate for a `GroupItemModel` it can display a `text` and a list of `ItemModels`.
component GroupItem {
    callback current_item_changed({ parent: int, item: int });

    private property <brush> foreground: Theme.brushes.foreground;
    in property <GroupItemModel> model;
    in property <int> item_index;
    in-out property <{ parent: int, item: int }> current_item;
    in-out property <bool> expanded: true;

    forward-focus: i_focus_scope;

    VerticalLayout {
        spacing: Theme.spaces.medium;

        i_container := Rectangle {
            height: Theme.sizes.small;

            i_container_layout := HorizontalLayout {
                padding_left: Theme.spaces.medium;
                padding_right: Theme.spaces.medium;
                spacing: Theme.spaces.medium;

                // The item is expandable if it has items.
                if(root.model.items.length > 0) : Icon {
                    y: (parent.height - self.height) / 2;
                    text: Icons.fa_var_chevron_down;
                    color: root.foreground;
                    vertical_alignment: center;
                    horizontal_alignment: left;

                    states [
                        collapsed when !root.expanded: {
                            text: Icons.fa_var_chevron_right;
                        }
                    ]
                }

                LargeLabel  {
                    color: root.foreground;
                    text: root.model.text;
                    vertical_alignment: center;
                    horizontal_alignment: left;
                    horizontal_stretch: 1;
                }
            }

            // The item is expandable if it has items.
            i_touch_area := TouchArea {
                enabled: root.model.items.length > 0;

                clicked => {
                    root.expanded = !root.expanded;
                }
            }

            i_focus_scope := FocusScope {
                x:0;
                width: 0px; // Do not react on clicks

                key_pressed(event) => {
                    if(event.text == " " || event.text == "\n") {
                        i_touch_area.clicked();
                        return accept;
                    }
                    return reject;
                }
            }

            if(i_focus_scope.has_focus) : FocusBorder {}

            animate background { duration: Theme.durations.fast; }
        }

        if(root.expanded) : VerticalLayout {
            for item[item_index] in root.model.items: Item {
                current_item <=> root.current_item;
                padding_left: i_container_layout.padding_left + i_container_layout.spacing + Theme.icon.size.medium;
                padding_right: i_container_layout.padding_right;
                leading_icon: item.leading_icon;
                highlighted: item.highlighted;
                text: item.text;
                trailing_icon: item.trailing_icon;
                index: item_index;
                parent_index: root.item_index;

                clicked => {
                    root.current_item = { parent: root.item_index, item: item_index };
                    root.current_item_changed(root.current_item);
                }
            }
        }
    }

    states [
        pressed when i_touch_area.pressed: {
            i_container.background: Theme.brushes.background.darker(Theme.state.pressed);
            foreground: Theme.brushes.foreground.darker(Theme.state.pressed);
        }
        hover when i_touch_area.has_hover: {
            i_container.background: Theme.brushes.background.darker(Theme.state.hover);
            foreground: Theme.brushes.foreground.darker(Theme.state.hover);
        }
    ]

    animate foreground { duration: Theme.durations.fast; }
}

// `List` is a non scrollable list with a default item delegate.
export component List inherits VerticalLayout {
    // Will be called after current is changed.
    callback current_item_changed({ parent: int, item: int });

    // Defines the list of models.
    in property <[GroupItemModel]> model;

    // Defines the current selected item.
    in-out property <{ parent: int, item: int }> current_item;

    spacing: Theme.spaces.medium;

    for parent_item[parent_index] in root.model: VerticalLayout {
        if(root.model.length > 1) : GroupItem {
            model: parent_item;
            item_index: parent_index;
            current_item <=> root.current_item;

            current_item_changed(item) => {
                root.current_item_changed(item);
            }
        }

        // Only one parent item.
        if(root.model.length == 1) : VerticalLayout {
            for item[index] in parent_item.items: Item {
                leading_icon: item.leading_icon;
                text: item.text;
                trailing_icon: item.trailing_icon;
                highlighted: item.highlighted;
                index: index;
                parent_index: 0;
                current_item: root.current_item;
                padding_left: Theme.spaces.medium;
                padding_right: Theme.spaces.medium;

                clicked => {
                    root.current_item = { parent: 0, item: index };
                    root.current_item_changed(root.current_item);
                }
            }
        }
    }
}

// `ListView` is a scrollable variant of `List`.
export component ListView {
    // Will be called after current is changed;
     callback current_item_changed({ parent: int, item: int });

    // Defines the list of models.
    in property <[GroupItemModel]> model <=> i_list.model;

    // Defines the current selected item;
    in-out property <{ parent: int, item: int }> current_item <=> i_list.current_item;

    ScrollView {
        preferred-width: 100%;
        preferred-height: 100%;

        i_list := List {
            current_item_changed(item) => {  
            root.current_item_changed(item);
            }
        }
    }
}