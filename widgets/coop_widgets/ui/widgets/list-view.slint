// SPDX-FileCopyrightText: 2022 Florian Blasius <co-sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Duration, Icography, Radius, Palette, Size, State, Space, Icons } from "../styling/styling.slint";
import { ScrollView } from "scroll-view.slint";
import { CheckableBase } from "checkables.slint";
import { LargeLabel, FocusBorder } from "../components/components.slint";

export enum SelectionMode {
    None,
    Single
}

export struct ListViewItem  {
    leading-icon: image,
    text: string,
    trailing-icon: image,
    highlighted: bool,
    spec: string
}

export struct GroupListViewItem  {
    text: string,
    items: [ListViewItem],
}

export component ItemDelegate inherits TouchArea {
    private property <brush> foreground: Palette.foreground;
    private property <brush> icon-color: highlighted ? Palette.primary : Palette.foreground;

    in property <bool> selected;
    in property <bool> highlighted;
    in property <image> leading-icon;
    in property <string> text;
    in property <image> trailing-icon;

    min-height: max(Size.small, i-layout.min-height);
    forward-focus: i-focus-scope;
    // padding: Space.medium;
    padding-right: Space.medium;
    padding-left: Space.medium;

    i-focus-scope := FocusScope {
        x: 0;
        width: 0px; // Do not react on clicks
        enabled: root.enabled;

        key-pressed(event) => {
            if(event.text == " " || event.text == "\n") {
                root.clicked();
                return accept;
            }
            return reject;
        }
    }

    i-background := Rectangle {
       i-layout := HorizontalLayout {
            padding-left: root.padding-left;
            padding-right: root.padding-right;
            spacing: Space.medium;

            if(root.leading-icon.width > 0 && root.leading-icon.height > 0) : Image {
                source: root.leading-icon;
                colorize: root.icon-color;
                width: Icography.small;
            }

            i-label := LargeLabel {
                text <=> root.text;
                vertical-alignment: center;
                horizontal-alignment: left;
                color: root.foreground;
                horizontal-stretch: 1;
                overflow: elide;
            }

            if(root.trailing-icon.width > 0 && root.trailing-icon.height > 0) : Image {
                source: root.trailing-icon;
                colorize: root.foreground;
                width: Icography.small;
            }
        }

        if(i-focus-scope.has-focus) : FocusBorder {}
    }

    states [
        disabled when !root.enabled: {
            i-label.color: Palette.foreground-disabled;
            root.icon-color: Palette.foreground-disabled;
        }

        pressed when root.pressed: {
            i-background.background: Palette.background.darker(State.pressed);
            foreground: Palette.foreground.darker(State.pressed);
            icon-color: highlighted ? Palette.primary.darker(State.pressed) : Palette.foreground.darker(State.pressed);
        }
        hover when root.has-hover: {
            i-background.background: Palette.background.darker(State.hover);
            foreground: Palette.foreground.darker(State.hover);
            icon-color: highlighted ? Palette.primary.darker(State.hover) : Palette.foreground.darker(State.hover);
        }
        selected when root.selected: {
            i-background.background: Palette.background.darker(State.selected);
        }
    ]

    animate foreground { duration: Duration.fast; }
}

// Delegate for a `GroupListViewItem` it can display a `text` and a list of `ItemModels`.
component GroupItemDelegate {
    private property <brush> foreground: Palette.foreground;

    callback current-item-changed(/* current-item */ { parent: int, item: int });
    callback item-pointer-event(/* item-index */ int, /* event */ PointerEvent, /* absolute mouse position */ Point);

    in property <GroupListViewItem> model;
    in property <int> item-index;
    in property <SelectionMode> selection-mode: SelectionMode.Single;
    in-out property <{ parent: int, item: int }> current-item;
    in-out property <bool> expanded: true;

    min-height: max(Size.small, i-layout.min-height);
    forward-focus: i-focus-scope;

    i-layout := VerticalLayout {
        spacing: root.expanded ? Space.medium : 0;

        i-background := Rectangle {
            height: Size.small;

            i-background-layout := HorizontalLayout {
                padding-left: Space.medium;
                padding-right: Space.medium;
                spacing: Space.medium;

                Image {
                    y: (parent.height - self.height) / 2;
                    source: Icons.arrow-drop-down;
                    colorize: root.foreground;

                    states [
                        collapsed when !root.expanded: {
                            source: Icons.arrow-right;
                        }
                    ]
                }

                LargeLabel  {
                    color: root.foreground;
                    text: root.model.text;
                    vertical-alignment: center;
                    horizontal-alignment: left;
                    horizontal-stretch: 1;
                }
            }

            // The item is expandable if it has items.
            i-touch-area := TouchArea {
                clicked => {
                    root.expanded = !root.expanded;
                }
            }

            i-focus-scope := FocusScope {
                x:0;
                width: 0px; // Do not react on clicks

                key-pressed(event) => {
                    if(event.text == " " || event.text == "\n") {
                        i-touch-area.clicked();
                        return accept;
                    }
                    return reject;
                }
            }

            if (i-focus-scope.has-focus) : FocusBorder {}

            animate background { duration: Duration.fast; }
        }

        VerticalLayout {
            for item[item-index] in root.model.items: ItemDelegate {
                padding-left: i-background-layout.padding-left + i-background-layout.spacing + Icography.medium;
                padding-right: i-background-layout.padding-right;
                leading-icon: item.leading-icon;
                highlighted: item.highlighted;
                text: item.text;
                trailing-icon: item.trailing-icon;
                selected: root.item-index == root.current-item.parent && item-index == root.current-item.item
                    && root.selection-mode != SelectionMode.None;
                height: self.min-height;

                clicked => {
                    if(root.selection-mode == SelectionMode.None) {
                        return;
                    }
                    root.current-item = { parent: root.item-index, item: item-index };
                    root.current-item-changed(root.current-item);
                }

                pointer-event(pe) => {
                    root.item-pointer-event(item-index, pe, {
                        x: self.absolute-position.x + self.mouse-x - root.absolute-position.x,
                        y: self.absolute-position.y + self.mouse-y - root.absolute-position.y,
                    });
                }

                states [
                    collapsed when !root.expanded : {
                        height: 0;
                        opacity: 0;
                    }
                ]

                animate height { duration: Duration.fast; easing: cubic-bezier(0.05, 0.7, 0.1, 1.0); }
            }
        }
    }

    states [
        pressed when i-touch-area.pressed: {
            i-background.background: Palette.background.darker(State.pressed);
            foreground: Palette.foreground.darker(State.pressed);
        }
        hover when i-touch-area.has-hover: {
            i-background.background: Palette.background.darker(State.hover);
            foreground: Palette.foreground.darker(State.hover);
        }
    ]

    animate foreground { duration: Duration.fast; }
}

export component ListView inherits ScrollView {
    @children
}

component StandardListViewBase inherits ListView {
    private property <length> item-height: self.viewport-height / self.model.length;
    private property <length> current-item-y: self.viewport-y + current-item * item-height;

    callback current-item-changed(/* current-item */ int);
    callback item-pointer-event(/* item-index */ int, /* event */ PointerEvent, /* absolute mouse position */ Point);

    in property <[ListViewItem]> model;
    in property <SelectionMode> selection-mode: SelectionMode.Single;
    in-out property <int> current-item: -1;

    for item[index] in root.model : ItemDelegate {
        height: self.min-height;
        selected: index == root.current-item && root.selection-mode != SelectionMode.None;
        leading-icon: item.leading-icon;
        text: item.text;
        trailing-icon: item.trailing-icon;
        highlighted: item.highlighted;

        clicked => {
            set-current-item(index);
        }

        pointer-event(pe) => {
            root.item-pointer-event(index, pe, {
                x: self.absolute-position.x + self.mouse-x - root.absolute-position.x,
                y: self.absolute-position.y + self.mouse-y - root.absolute-position.y,
            });
        }
    }

    public function set-current-item(index: int) {
        if(index < 0 || index >= model.length || root.selection-mode == SelectionMode.None) {
            return;
        }

        current-item = index;
        root.current-item-changed(current-item);

        if(current-item-y < 0) {
            self.viewport-y += 0 - current-item-y;
        }

        if(current-item-y + item-height > self.visible-height) {
            self.viewport-y -= current-item-y + item-height - self.visible-height;
        }
    }
}

export component StandardListView inherits StandardListViewBase {
    FocusScope {
        x: 0;
        width: 0;  // Do not react on clicks

        key-pressed(event) => {
            if (event.text == Key.UpArrow) {
                root.set-current-item(root.current-item - 1);
                return accept;
            } else if (event.text == Key.DownArrow) {
                root.set-current-item(root.current-item + 1);
                return accept;
            }

            reject
        }
    }
}

export component GroupListView inherits ScrollView  {
    callback current-item-changed(/* current-item */ { parent: int, item: int });
    callback item-pointer-event(int /* parent-index */, int /* item-index */, PointerEvent /* event */, Point /* absolute mouse position */);

    in property <[GroupListViewItem]> model;
    in property <SelectionMode> selection-mode: SelectionMode.Single;
    in-out property <{ parent: int, item: int }> current-item;

    VerticalLayout {
        spacing: Space.medium;

        for parent-item[parent-index] in root.model: VerticalLayout {
           GroupItemDelegate {
                model: parent-item;
                item-index: parent-index;
                current-item <=> root.current-item;
                height: self.min-height;

                current-item-changed(item) => {
                    root.current-item-changed(item);
                }

                item-pointer-event(index, event, position) => {
                    root.item-pointer-event(parent-index, index, event, {
                        x: position.x,
                        y: position.y,
                    });
                }
            }
        }
    }
}