// SPDX-FileCopyrightText: 2023 Florian Blasius <co-sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { DropEvent } from "../structs.slint";
import { SelectionMode } from "../enums.slint";

export component ListViewExtension {
    private property <int> into-view-item;
    private property <length> into-view-item-y: root.viewport-y + root.into-view-item * root.item-height;

    callback current-item-changed(/* current-item */ int);
    callback drop-event(/* event */ DropEvent);
    callback drag-canceled();

    in property <bool> drag-drop-enabled;
    in property <length> drag-ghost-height;
    in property <int> item-count;
    in property <SelectionMode> selection-mode: SelectionMode.Single;
    out property <length> item-height: root.viewport-height / root.item-count;
    out property <length> drag-position-x;
    out property <length> drag-position-y;
    out property <int> drag-hover-index: !root.drag-drop-enabled || !root.check-bounds() ? -1 : root.get-index(root.drag-position-y);
    out property <bool> dragging;
    out property <int> drag-source: -1;
    in property <length> visible-width;
    in property <length> visible-height;
    in-out property <length> viewport-width;
    in-out property <length> viewport-height;
    in-out property <length> viewport-x;
    in-out property <length> viewport-y;
    in-out property <int> current-item: -1;

    @children

    public pure function get-index(y: length) -> int {
        ((y - root.viewport-y - root.item-height / 2) / root.item-height)
    }

    public function bring-into-view(index: int) {
        root.into-view-item = index;

        if (root.into-view-item-y < 0) {
            root.viewport-y += 0 - root.into-view-item-y;
        }

        if (root.into-view-item-y + root.item-height > root.visible-height) {
           root.viewport-y -= root.into-view-item-y + root.item-height - root.visible-height;
        }
    }

    public function item-y(index: int) -> length {
        root.viewport-y + index * root.item-height + root.item-height / 2
    }

    public function set-current-item(index: int) {
        if (index < 0 || index >= root.item-count || root.selection-mode == SelectionMode.None
            || root.selection-mode == SelectionMode.Custom) {
            return;
        }

        root.current-item = index;
        root.current-item-changed(index);
        root.bring-into-view(index);
    }

    public function start-drag(source: int) {
        if (!root.drag-drop-enabled) {
            return;
        }

        self.drag-source = source;
        self.dragging = true;
    }

    public function update-drag-position(x: length, y: length) {
        if (!root.drag-drop-enabled) {
            return;
        }

        root.drag-position-x = x - self.x;
        root.drag-position-y = y - self.y;

        if (root.drag-position-y + root.drag-ghost-height >= root.height) {
            root.viewport-y = max(root.height - root.viewport-height, root.viewport-y - 1px);
        }

        if (root.drag-position-y <= 0) {
            root.viewport-y = min(root.viewport-y + 1px, 0);
        }
    }

    public function drop() {
        if (!root.drag-drop-enabled) {
            return;
        }

        if (root.drag-source != root.get-index(root.drag-position-y) && root.check-bounds()) {
            root.drop-event({ source: root.drag-source,
                target: root.get-index(root.drag-position-y)});
        } else {
            root.drag-canceled();
        }

        self.drag-source = 0;
        self.dragging = false;
    }

    function check-bounds() -> bool {
        root.drag-position-x >= 0 && root.drag-position-y >= 0 && root.drag-position-x <= root.visible-width && root.drag-position-y <= root.viewport-height
    }
}