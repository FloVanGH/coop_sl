import { co } from "../co/co.slint";
import { StateLayer, Icon } from "../components/components.slint";

// Internal base button.
BaseButton := Rectangle {
    callback clicked <=> state_layer.clicked;
    property<string> text: "text";
    property<string> icon <=> icon.icon;
    property<length> container_border_width <=> container.border_width;
    property<brush> container_border_color <=> container.border_color;
    property<brush> container_background <=> container.background;
    property<brush> label_color <=> label.color;
    property<length> icon_size: root.icon == "" ? 0px : 12px;
    property<length> spacing: root.icon == "" || root.text == "" ? 0px : co.spaces.small;

    width: icon_size + spacing + size_helper.width + 2 * co.spaces.large;
    height: co.sizes.medium;

    container := Rectangle {
        x: (parent.width - width) / 2;
        y: (parent.height - height) / 2;
        width: 100%;
        height: 100%;
        border_radius: co.radius.large;

        animate width { duration: co.durations.fast; easing: ease_in_out; }
        animate height { duration: co.durations.fast; easing: ease_in_out; }
    }

    icon := Icon {
        x: co.spaces.large;
        y: (parent.height - height) / 2;
        icon_size: root.icon_size;

        animate icon_size { duration: co.durations.fast; easing: ease_in_out; }
    }

    size_helper := Text {
        text: label.text;
        visible: false;
        font_size: co.typo.label_medium.size;
        font_weight: label.font_weight;
        font_family: label.font_family;
    }

    label := Text {
        x: icon.x + spacing + icon.width;
        y: (parent.height - height) / 2;
        color: co.brushes.foreground;
        text <=> root.text;
        vertical-alignment: center;
        horizontal-alignment: center;
        font_size: co.typo.label_medium.size;
        font_weight: co.typo.label_medium.weight;
        font_family: co.typo.label_medium.family;

        animate font_size { duration: co.durations.fast; easing: ease_in_out; }
    }

    state_layer := StateLayer {  
        x: (parent.width - width) / 2;
        y: (parent.height - height) / 2;
        width: 100%;
        height: 100%;
        border_radius: co.radius.large;

        animate width { duration: co.durations.fast; easing: ease_in_out; }
        animate height { duration: co.durations.fast; easing: ease_in_out; }
    }

    states [
        pressed when state_layer.pressed : {
            container.width: 96%;
            container.height: 96%;
            state_layer.width: 96%;
            state_layer.height: 96%;
            label.font_size: co.typo.label_medium.size - 1px;
            icon.icon_size: co.typo.label_medium.size - 1px;
        }
    ]
}

// A bordered Button with a `clicked` callback.
export OutlineButton := Rectangle {
    // Callback to handle button click.
    callback clicked <=> base.clicked;
    
    // Defines the text that is displayed on the button.
    property<string> text: "text";

    // Defines the optional icon of the button.
    property<string> icon <=> base.icon;

    width: base.width;
    height: base.height;

    base := BaseButton {  
        text <=> root.text;
        container_border_width: 1px;
        container_border_color: co.brushes.border;
    }
}

// A filled Button with a `clicked` callback.
export FilledButton := Rectangle {
    // Callback to handle button click.
    callback clicked <=> base.clicked;
    
    // Defines the text that is displayed on the button.
    property<string> text: "text";

    // Defines the optional icon of the button.
    property<string> icon <=> base.icon;

    // If set to `true` the background of the button will uses `co.brushes.primary`.
    property<bool> primary: false;

    width: base.width;
    height: base.height;

    base := BaseButton {  
        text <=> root.text;
        container_background: root.primary ? co.brushes.primary : co.brushes.surface;
        label_color:  root.primary ? co.brushes.on_surface : co.brushes.foreground;
    }
}