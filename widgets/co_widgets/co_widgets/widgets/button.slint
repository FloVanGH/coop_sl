import { co } from "../co/co.slint";
import { StateLayer, Icon } from "../components/components.slint";

// Internal base button.
BaseButton := Rectangle {
    callback clicked <=> i_state_layer.clicked;
    property<string> text: "text";
    property<string> icon <=> i_icon.icon;
    property<length> i_container_border_width <=> i_container.border_width;
    property<brush> i_container_border_color <=> i_container.border_color;
    property<brush> i_container_background <=> i_container.background;
    property<brush> label_color <=> i_label.color;
    property<length> icon_size: co.icons.size_small;
    property<length> spacing: root.icon == "" || root.text == "" ? 0px : co.spaces.medium;
    property<float> scale: 1.0;

    padding_left:  co.spaces.large;
    padding_right: co.spaces.large;

    width: padding_left + i_container.icon_width + spacing + i_size_helper.width + padding_right;
    height: co.sizes.medium;

    i_container := Rectangle {
        property<length> spacing: root.spacing;
        property<length> icon_width: root.icon != "" ? root.icon_size : 0px;

        x: (parent.width - width) / 2;
        y: (parent.height - height) / 2;
        width: root.width * root.scale;
        height: root.height * root.scale;
        border_radius: co.radius.large;
        padding_left: root.padding_left * root.scale;
        padding_right: root.padding_right * root.scale;

        i_icon := Icon {
            x: parent.padding_right;
            y: (parent.height - height) / 2;
            icon_size: root.icon_size * root.scale;
            icon_color: root.label_color;
        }
    
        i_label := Text {
            x: i_icon.x + i_icon.width + parent.spacing * root.scale;
            y: (parent.height - height) / 2;
            color: co.brushes.foreground;
            text <=> root.text;
            horizontal-alignment: center;
            font_size: co.typo.label_medium.size * root.scale;
            font_weight: co.typo.label_medium.weight;
            font_family: co.typo.label_medium.family;
        }

        i_state_layer := StateLayer {  
            width: 100%;
            height: 100%;
            border_radius: i_container.border_radius;
        }
    }

    // used to calculate the un-scaled size of the button
    i_size_helper := Text {
        text: i_label.text;
        visible: false;
        font_size: i_label.font_size;
        font_weight: i_label.font_weight;
        font_family: i_label.font_family;
    }

    states [
        pressed when i_state_layer.pressed : {
            root.scale: 0.96;
        }
    ]

    // animate scale { duration: co.durations.fast; easing: ease_in_out; }
}

// A bordered Button with a `clicked` callback.
export OutlineButton := Rectangle {
    // Callback to handle button click.
    callback clicked <=> i_base.clicked;
    
    // Defines the text that is displayed on the button.
    property<string> text: "text";

    // Defines the optional icon of the button.
    property<string> icon <=> i_base.icon;

    width: i_base.width;
    height: i_base.height;

    i_base := BaseButton {  
        text <=> root.text;
        i_container_border_width: 1px;
        i_container_border_color: co.brushes.border;
    }
}

// A filled Button with a `clicked` callback.
export Button := Rectangle {
    // Callback to handle button click.
    callback clicked <=> i_base.clicked;
    
    // Defines the text that is displayed on the button.
    property<string> text: "text";

    // Defines the optional icon of the button.
    property<string> icon <=> i_base.icon;

    // If set to `true` the background of the button will uses `co.brushes.primary`.
    property<bool> primary: false;

    width: i_base.width;
    height: i_base.height;

    i_base := BaseButton {  
        text <=> root.text;
        i_container_background: root.primary ? co.brushes.primary : co.brushes.surface;
        label_color:  root.primary ? co.brushes.on_surface : co.brushes.foreground;
    }
}