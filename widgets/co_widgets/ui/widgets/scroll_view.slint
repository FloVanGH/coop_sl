import { co } from "../co/co.slint";

ScrollIndicator := Rectangle {
    border_radius: co.radius.extra_small;
    background: co.brushes.foreground;
    opacity: 0;

    animate opacity { duration: co.durations.medium; }
}

// Allows to scroll content that is larger then the given size.
export ScrollView := Rectangle {
    // The width of the content view port.
    property <length> viewport_width <=> i_flickable.viewport_width;

    // The height of the content view port.
    property <length> viewport_height <=> i_flickable.viewport_height;

    // The current view port content x position.
    property <length> viewport_x <=> i_flickable.viewport_x;

    // The current view port content x position.
    property <length> viewport_y <=> i_flickable.viewport_y;

    // If set to `false` the `ScrollView is disabled.
    property <bool> enabled: true;


    min_width: co.sizes.medium;
    min_height: min_width;
    horizontal_stretch: 1;
    vertical_stretch: 1;

    i_flickable := Flickable {
        interactive: false;
        width: 100%;
        height: 100%;

        @children
    }

    i_ver_scroll := ScrollIndicator {
        property<length> padding_height: root.height - 2 * co.spaces.small  - i_hor_scroll.height;
        property<length> max: root.viewport_height - root.height;

        x: parent.width - width - co.spaces.small;
        y:  co.spaces.small + (padding_height - height) * (-root.viewport_y / max);
        width: 4px;
        height: max <= 0phx ? 0phx : padding_height * (root.height / root.viewport_height);

        states [  
            visible when root.viewport_height > root.height : {
                opacity: 0.3;
            }
        ]
    }

    i_hor_scroll := ScrollIndicator {
        property<length> padding_width: root.width - 2 * co.spaces.small - i_ver_scroll.width;
        property<length> max: root.viewport_width - root.width;

        x: co.spaces.small + (padding_width - width) * (-root.viewport_x / max);
        y: parent.height - height - co.spaces.small;
        width: max <= 0phx ? 0phx : padding_width * (root.height / root.viewport_height);
        height: 4px; 

        states [  
            visible when root.viewport_width > root.width : {
                opacity: 0.3;
            }
        ]
    }   
}