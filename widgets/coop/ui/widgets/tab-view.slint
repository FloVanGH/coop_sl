// SPDX-FileCopyrightText: 2023 Florian Blasius <co-sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Radius, Palette, Size } from "../styling.slint";
import { Position } from "../enums.slint";
import { TabItem } from "../structs.slint";
import { TabDelegate } from "../_internal/delegates.slint";
import { FocusBorder } from "../components.slint";
import { ScrollView } from "scroll-view.slint";

component TabBar inherits Rectangle {
    in property <bool> enabled <=> i-scroll-view.enabled;
    in property <[TabItem]> model;
    in-out property <int> current-item: 0;

    callback tab-item-clicked(/* index */ int);
    callback close-tab-item(/* index */ int);

    vertical-stretch: 0;
    preferred-width: 100%;
    background: Palette.background-alt;
    min-height: max(Size.small, i-layout.min-height);

    i-scroll-view := ScrollView {
        width: 100%;

        i-layout := HorizontalLayout {
            alignment: start;

            for tab-item[index] in root.model : TabDelegate {
                clicked => {
                    root.tab-item-clicked(index);
                }

                close => {
                    root.close-tab-item(index);
                }

                text: tab-item.text;
                icon: tab-item.icon;
                enabled: root.enabled;
                selected: index == root.current-item;
                closeable: tab-item.closable;
            }
        }
    }
}

export component TabView inherits FocusScope {
    in property <[TabItem]> model;
    in property <Position> tab-bar-position;
    out property <TabItem> current-value: root.model[root.current-item];
    in-out property <int> current-item: 0;

    callback current-item-changed(/* current-item */ int);
    callback close-item(/* index */ int);

    public function set-current-item(index: int) {
        if (index < 0 || index >= root.model.length) {
            return;
        }

        root.current-item = index;
        root.current-item-changed(root.current-item);
    }

    key-pressed(event) => {
        if (event.text == Key.LeftArrow) {
            root.set-current-item(root.current-item - 1);
            return accept;
        } else if (event.text == Key.RightArrow) {
            root.set-current-item(root.current-item + 1);
            return accept;
        }

        reject
    }

    preferred-height: 100%;
    preferred-width: 100%;

    i-background := Rectangle {
        border-radius: Radius.medium;

        VerticalLayout {
            if (root.tab-bar-position == Position.Top) : TabBar {
                tab-item-clicked(index) => {
                    root.set-current-item(index);
                }

                close-tab-item(index) => {
                    root.close-item(index);
                }

                model <=> root.model;
                current-item <=> root.current-item;
            }

            Rectangle {
                @children
            }

            if (root.tab-bar-position == Position.Bottom) : TabBar {
                tab-item-clicked(index) => {
                    root.set-current-item(index);
                }

                close-tab-item(index) => {
                    root.close-item(index);
                }

                model <=> root.model;
                current-item <=> root.current-item;
            }
        }
    }

    if (root.has-focus) : FocusBorder {
        width: 100%;
        height: 100%;
        border-radius: i-background.border-radius;
    }
}