// SPDX-FileCopyrightText: 2022 Florian Blasius <co-sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Duration, Icography, Radius, Palette, State, Space, Size, Icons } from "../styling.slint";
import { SelectionMode } from "../enums.slint";
import { ListViewExtension } from "../_internal/extensions.slint";
import { LineEdit } from "line-edit.slint";
import { DropEvent, ListViewItem, TableRowItem } from "../structs.slint";
import { Spacer } from "../layouts/spacer.slint";
import { FocusBorder, LargeLabel } from "../components.slint";
import { ItemDelegateBase } from "../_internal/delegates.slint";
import { ListView } from "list-view.slint";

component TableViewColumn inherits Rectangle {
    callback clicked <=> i-touch-area.clicked;
    callback adjust-size(/* size*/ length);

    in property <SortOrder> sort-order: SortOrder.unsorted;

    background: Palette.background;

    i-touch-area := TouchArea {
        width: parent.width - 11px;
    }

    HorizontalLayout {
        padding-left: Space.medium;
        padding-right: Space.medium;
        spacing: Space.small;

        HorizontalLayout {
            @children
        }

        i-icon := Image {
            image-fit: contain;
            colorize: Palette.foreground;
            visible: root.sort-order != SortOrder.unsorted;
            width: Icography.small;
            y: (parent.height - self.height) / 2;
            source: root.sort-order == SortOrder.ascending ? Icons.arrow-downward : Icons.arrow-upward;

            animate colorize { duration: Duration.fast; }
        }
    }

    // border
    Rectangle {
        y: parent.height - self.height;
        width: 100%;
        height: 1px;
        background: Palette.border-disabled;
    }

    Rectangle {
        x: parent.width - 1px;
        width: 1px;

        i-movable-touch-area := TouchArea {
            width: 10px;
            mouse-cursor: ew-resize;

            moved => {
                if (self.pressed) {
                    adjust_size(self.mouse-x - self.pressed-x);
                }
            }
        }

        animate background { duration: Duration.fast; }

        states [
            hover when i-movable-touch-area.has-hover : {
                background: Palette.background.darker(State.hover);
            }
        ]
    }

    states [
        pressed when i-touch-area.pressed : {
            background: Palette.background.darker(State.pressed);
        }
        hover when i-touch-area.has-hover : {
            background: Palette.background.darker(State.hover);
        }
    ]
}

component TableViewCell inherits Rectangle {
    clip: true;
    min-height: Size.small;

    HorizontalLayout {
        padding-left: Space.medium;
        padding-right: Space.medium;
        spacing: Space.large;

        @children
    }
}

component TableViewRow inherits ItemDelegateBase {
    in property <bool> alternative-background;

    min-width: i-layout.min-width;
    min-height: max(Size.small, i-layout.min-height);
    border-radius: 4px;
    background: root.alternative-background ? Palette.background-alt : transparent;

    i-layout := HorizontalLayout {
       @children
    }

    states [
        pressed when root.pressed : {
            root.background: Palette.background.darker(State.pressed);
        }
        selected when root.selected : {
            root.background: Palette.background.darker(State.selected);
        }
        hover when root.has-hover || root.has-drag-hover : {
            root.background: Palette.background.darker(State.hover);
        }
    ]
}

export component StandardTableView {
    private property <length> min-header-height: Size.small;

    callback sort-ascending(/* column-index */ int) -> bool;
    callback sort-descending(/* column-index */ int) -> bool;
    callback row-pointer-event(/* row-index */ int,  /* event */ PointerEvent, /* absolute mouse position */ Point);
    callback current-row-changed <=> i-list-view-extension.current-item-changed;
    callback key-pressed(/* event */ KeyEvent) -> EventResult;
    callback item-accepted(/* row-index */ int, /* column-index */ int, /* text */ string);
    callback drop-event <=> i-list-view-extension.drop-event;

    in property <[TableRowItem]> rows;
    in property <bool> zebra-pattern;
    in property <SelectionMode> selection-mode <=> i-list-view-extension.selection-mode;
    in property <{ row: int, column: int}> edit-item: { row: -1, column: -1 };
    in property <bool> drag-drop-enabled <=> i-list-view-extension.drag-drop-enabled;
    out property <int> current-sort-column: -1;
    out property <bool> has-focus: i-focus-scope.has-focus;
    in-out property <[TableColumn]> columns;
    in-out property <int> current-row <=> i-list-view-extension.current-item;

    min-width: 400px;
    min-height: 100px;
    horizontal-stretch: 1;
    vertical-stretch: 1;
    forward-focus: i-focus-scope;

    i-focus-scope := FocusScope {
        x: 0;
        width: 0; // Do not react on clicks

        key-pressed(event) => {
            if (root.key-pressed(event) == accept) {
                return accept;
            }

            if (root.selection-mode != SelectionMode.Custom) {
                if (event.text == Key.UpArrow) {
                    root.set-current-row(root.current-row - 1);
                    return accept;
                } else if (event.text == Key.DownArrow) {
                    root.set-current-row(root.current-row + 1);
                    return accept;
                }
            }

            reject
        }
    }

    i-background := Rectangle {
        VerticalLayout {
            spacing: Space.small;

            Rectangle {
                clip: true;
                vertical-stretch: 0;
                min-height: i-header-layout.min-height;

                i-header-layout := HorizontalLayout {
                    width: max(self.preferred-width, parent.width);
                    x: i-list-view.viewport-x;
                    min-height: root.min-header-height;

                    for column[index] in root.columns : TableViewColumn {
                        sort-order: column.sort-order;
                        horizontal-stretch: column.horizontal-stretch;
                        min-width: max(column.min-width, column.width);
                        preferred-width: self.min-width;
                        max-width: (index < columns.length && column.width >= 1px) ? max(column.min-width, column.width) : 100000px;

                        LargeLabel {
                            vertical-alignment: center;
                            text: column.title;
                            overflow: elide;
                        }

                        clicked => {
                            root.sort(index);
                        }

                        adjust-size(diff) => {
                            column.width = max(1px, self.width + diff);
                        }
                    }
                }
            }

            i-list-view-extension := ListViewExtension {
                vertical-stretch: 1;
                drag-ghost-height: Size.small;
                item-count: root.rows.length;
                visible-width: i-list-view.visible-width;
                visible-height: i-list-view.visible-height;
                viewport-width <=> i-list-view.viewport-width;
                viewport-height <=> i-list-view.viewport-height;
                viewport-x <=> i-list-view.viewport-x;
                viewport-y <=> i-list-view.viewport-y;

                i-list-view := ListView {
                    interactive: !root.drag-drop-enabled;

                    for row[row-index] in root.rows : TableViewRow {
                        private property <bool> left-pressed;

                        alternative-background: mod(row-index, 2) != 0 && root.zebra-pattern;
                        selected: (row-index == root.current-row && root.selection-mode == SelectionMode.Single)
                            || (row.selected && root.selection-mode == SelectionMode.Custom);
                        has-drag-hover: i-list-view-extension.dragging && row-index == i-list-view-extension.drag-hover-index;

                        for cell[column-index] in row.model : TableViewCell {
                            private property <bool> edit: row-index == root.edit-item.row && column-index == root.edit-item.column;

                            horizontal-stretch: root.columns[column-index].horizontal-stretch;
                            min-width: max(columns[column-index].min-width, columns[column-index].width);
                            preferred-width: self.min-width;
                            max-width: (column-index < columns.length && columns[column-index].width >= 1px) ?
                                max(columns[column-index].min-width, columns[column-index].width) : 100000px;

                            if (cell.leading-icon.width > 0 && cell.leading-icon.height > 0) : Image {
                                source: cell.leading-icon;
                                width: Icography.small;
                                colorize: cell.highlighted ? Palette.primary : Palette.foreground;
                            }

                            if (!edit && cell.text != "") : LargeLabel {
                                text: cell.text;
                                vertical-alignment: center;
                                horizontal-alignment: left;
                                horizontal-stretch: 1;
                                overflow: elide;
                            }

                            if (edit) : LineEdit {
                                y: (parent.height - self.height) / 2;
                                height: Size.extra-small;
                                text: cell.text;
                                horizontal-stretch: 1;

                                accepted(text) => {
                                    root.item-accepted(row-index, column-index, text);
                                }
                            }

                            if (cell.trailing-icon.width > 0 && cell.trailing-icon.height > 0) : Image {
                                source: cell.trailing-icon;
                                colorize: Palette.foreground;
                                width: Icography.small;
                            }
                        }

                        clicked => {
                            root.set-current-row(row-index);
                        }

                        pointer-event(event) => {
                            if (event.kind == PointerEventKind.down && event.button == PointerEventButton.left) {
                                self.left-pressed = true;
                            } else {
                                self.left-pressed = false;
                            }

                            if (i-list-view-extension.dragging && event.kind == PointerEventKind.up && event.button == PointerEventButton.left) {
                                i-list-view-extension.drop();
                                return;
                            }

                            if (self.mouse-x < 0 || self.mouse-y < 0 || self.mouse-x > self.width || self.mouse-y > self.height) {
                                return;
                            }

                            root.row-pointer-event(row-index, event, {
                                x: self.absolute-position.x + self.mouse-x - root.absolute-position.x,
                                y: self.absolute-position.y + self.mouse-y - root.absolute-position.y,
                            });
                        }

                        moved => {
                            if (!root.drag-drop-enabled || (abs((self.mouse-x - self.pressed-x) / 1px) < 3 && abs((self.mouse-y - self.pressed-y) / 1px) < 3)) {
                                return;
                            }

                            if (!i-list-view-extension.dragging && self.left-pressed) {
                                i-list-view-extension.start-drag(row-index);
                            }

                            i-list-view-extension.update-drag-position(self.absolute-position.x + self.mouse-x - root.absolute-position.x,
                                self.absolute-position.y + self.mouse-y - root.absolute-position.y);
                        }
                    }
                }

                // drag ghost
                if (i-list-view-extension.dragging) : Rectangle {
                    x: i-list-view-extension.drag-position-x;
                    y: i-list-view-extension.drag-position-y;
                    width: i-list-view.width;
                    height: i-list-view-extension.drag-ghost-height;
                    background: Palette.background.darker(State.pressed);

                    HorizontalLayout {
                        for cell[column-index] in root.rows[i-list-view-extension.drag-source].model : TableViewCell {
                            horizontal-stretch: root.columns[column-index].horizontal-stretch;
                            min-width: max(columns[column-index].min-width, columns[column-index].width);
                            preferred-width: self.min-width;
                            max-width: (column-index < columns.length && columns[column-index].width >= 1px) ?
                                max(columns[column-index].min-width, columns[column-index].width) : 100000px;

                            if (cell.leading-icon.width > 0 && cell.leading-icon.height > 0) : Image {
                                source: cell.leading-icon;
                                width: Icography.small;
                                colorize: cell.highlighted ? Palette.primary : Palette.foreground;
                            }

                            if (cell.text != "") : LargeLabel {
                                text: cell.text;
                                vertical-alignment: center;
                                horizontal-alignment: left;
                                horizontal-stretch: 1;
                                overflow: elide;
                            }

                            if (cell.trailing-icon.width > 0 && cell.trailing-icon.height > 0) : Image {
                                source: cell.trailing-icon;
                                colorize: Palette.foreground;
                                width: Icography.small;
                            }
                        }
                    }
                }

                if (i-focus-scope.has-focus) : FocusBorder {
                    width: 100%;
                    height: 100%;
                    border-radius: Radius.medium;
                }
            }
        }

        @children
    }

    function sort(index: int) {
        if (root.current-sort-column != index) {
            root.columns[root.current-sort-column].sort-order = SortOrder.unsorted;
        }

        if(root.columns[index].sort-order == SortOrder.ascending) {
            if (root.sort-descending(index)) {
                root.columns[index].sort-order = SortOrder.descending;
            }
        } else {
            if (root.sort-ascending(index)) {
                root.columns[index].sort-order = SortOrder.ascending;
            }
        }

        root.current-sort-column = index;
    }

    public function set-current-row(index: int) {
       i-list-view-extension.set-current-item(index);
    }

    public function bring-row-into-view(index: int) {
        i-list-view-extension.bring-into-view(index);
    }

    public function row-y(index: int) -> length {
        i-list-view-extension.item-y(index)
    }
}