// SPDX-FileCopyrightText: 2022 Florian Blasius <co_sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Palette } from "../styling.slint";
import { OutlineButton } from "outline-button.slint";
import { Icons } from "../styling.slint";
import { KeyModel } from "../structs.slint";

component VirtualKeyboardButton inherits OutlineButton {
    horizontal-stretch: 0;
}

export global VirtualKeyboardAdapter {
    in property <[[[KeyModel]]]> default-key-sets: [
       [
            [
                { key: "q", shift-key: "Q" },
                { key: "w", shift-key: "W"  },
                { key: "e", shift-key: "E"  },
                { key: "r", shift-key: "R"  },
                { key: "t", shift-key: "T"  },
                { key: "y", shift-key: "Y"  },
                { key: "u", shift-key: "U"  },
                { key: "i", shift-key: "I"  },
                { key: "o", shift-key: "O"  },
                { key: "p", shift-key: "P"  }
            ],
            [
                { key: "a", shift-key: "A" },
                { key: "s", shift-key: "S" },
                { key: "d", shift-key: "D" },
                { key: "f", shift-key: "F" },
                { key: "g", shift-key: "G" },
                { key: "h", shift-key: "H" },
                { key: "j", shift-key: "J" },
                { key: "k", shift-key: "K" },
                { key: "l", shift-key: "L" }
            ],
            [
                { key: "z", shift-key: "Z" },
                { key: "x", shift-key: "X" },
                { key: "c", shift-key: "C" },
                { key: "v", shift-key: "V" },
                { key: "b", shift-key: "B" },
                { key: "n", shift-key: "N" },
                { key: "m", shift-key: "M" },
                { key: ",", shift-key: ";" },
                { key: ".", shift-key: ":" },
                { key: "?", shift-key: "?" }
            ],
       ],
       [
            [
                { key: "1", shift-key: "[" },
                { key: "2", shift-key: "]" },
                { key: "3", shift-key: "{" },
                { key: "4", shift-key: "}" },
                { key: "5", shift-key: "#" },
                { key: "6", shift-key: "%" },
                { key: "7", shift-key: "^" },
                { key: "8", shift-key: "*" },
                { key: "9", shift-key: "+" },
                { key: "0", shift-key: "=" }
            ],
            [
                { key: "-", shift-key: "_" },
                { key: "/", shift-key: "\\" },
                { key: ":", shift-key: "|" },
                { key: ";", shift-key: "~" },
                { key: "(", shift-key: "<" },
                { key: ")", shift-key: ">" },
                { key: "€", shift-key: "$" },
                { key: "&", shift-key: "€" },
                { key: "@", shift-key: "°" },
                { key: "'", shift-key: "#" },
            ],
            [
                { key: ".", shift-key: "." },
                { key: ",", shift-key: "," },
                { key: "?", shift-key: "?" },
                { key: "!", shift-key: "!" },
                { key: "'", shift-key: "'" },
            ],
       ]
    ];

    in-out property <bool> open;
    out property <int> current-key-set;
    out property <[[KeyModel]]> keys: default-key-sets[self.current-key-set];

    callback key-pressed(/* key */ string);

    public function switch-keyboard() {
        if (self.current-key-set < self.default-key-sets.length - 1) {
            self.current-key-set += 1;
        } else {
            self.current-key-set -= 1;
        }

        self.current-key-set = min(self.default-key-sets.length - 1, max(0, self.current-key-set))
    }
}

export component VirtualKeyboard  {
    private property <bool> shift;

    preferred-width: 100%;

    animate y { duration: 500ms; easing: cubic-bezier(0.05, 0.7, 0.1, 1.0); }

    Rectangle {
        background: Palette.background-alt;
        height: 100%;
    }

    i-layout := VerticalLayout {
        padding: 8px;
        spacing: 4px;

        for row[index] in VirtualKeyboardAdapter.keys : HorizontalLayout {
            spacing: 4px;

            if (index == 0) : VirtualKeyboardButton {
                clicked => {
                    VirtualKeyboardAdapter.key-pressed(Key.Escape);
                }

                text: "ESC";


            }

            if (index == 1) : VirtualKeyboardButton {
                clicked => {
                    VirtualKeyboardAdapter.key-pressed(Key.Tab);
                }

                text: "Tab";
            }

            // shift
            if (index == 2) : VirtualKeyboardButton {
                clicked => {
                    root.shift = !root.shift;
                }

                icon: Icons.arrow-upward;
            }

            for km in row : VirtualKeyboardButton {
                clicked() => {
                    VirtualKeyboardAdapter.key-pressed(self.text);
                    root.shift = false;
                }

                text: root.shift ? km.shift-key : km.key;
            }

            if (index == 0) : VirtualKeyboardButton {
                clicked => {
                    VirtualKeyboardAdapter.key-pressed(Key.Backspace);
                }

                icon: Icons.arrow-back;
            }

            if (index == 1) : VirtualKeyboardButton {
                clicked => {
                    VirtualKeyboardAdapter.key-pressed(Key.Return);
                }

                icon: Icons.keyboard-return;
            }

            // shift
            if (index == 2) : VirtualKeyboardButton {
                clicked => {
                    root.shift = !root.shift;
                }

                icon: Icons.arrow-upward;
            }
        }

        HorizontalLayout {
            spacing: 4px;

            VirtualKeyboardButton {
                clicked => {
                    VirtualKeyboardAdapter.switch-keyboard();
                }

                icon: Icons.calculate;
            }

            VirtualKeyboardButton {
                clicked => {
                    root.shift = false;
                    VirtualKeyboardAdapter.key-pressed(self.text);
                }

                horizontal-stretch: 1;
                text: " ";
            }

            VirtualKeyboardButton {
                clicked => {
                    VirtualKeyboardAdapter.key-pressed(Key.LeftArrow);
                }

                icon: Icons.arrow-back;
            }

            VirtualKeyboardButton {
                clicked => {
                    VirtualKeyboardAdapter.key-pressed(Key.RightArrow);
                }

                icon: Icons.arrow-forward;
            }
        }
    }
}