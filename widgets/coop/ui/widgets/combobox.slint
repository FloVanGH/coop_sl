// SPDX-FileCopyrightText: 2022 Florian Blasius <co-sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Duration, Icography, Radius, Palette, Icons, Size, Space, State } from "../styling.slint";
import { FocusBorder, Popup, LargeLabel } from "../components.slint";
import { ItemDelegate } from "../_internal/delegates.slint";
import { ListViewItem } from "../structs.slint";

export component ComboBox {
    in property <[ListViewItem]> model;
    in property <bool> enabled: true;
    in property <string> placeholder-text;
    out property <ListViewItem> current-value: root.current-index < 0 || root.current-index > root.model.length ? {} : root.model[root.current-index];
    out property <bool> has-focus: i-focus-scope.has-focus;
    in-out property <int> current-index: -1;

    callback selected(/* current-index */ int);

    private property <length> scroll-delta: 2px;

    function select(index: int) {
        root.current-index = index;
        root.selected(root.current-index);
    }

    function move-selection-up() {
        root.select(Math.max(root.current-index - 1, 0));
    }

    function move-selection-down() {
        root.select(Math.min(root.current-index + 1, root.model.length - 1));
    }

    accessible-role: combobox;
    accessible-value: root.current-index;
    min-width: max(Size.large, i-layout.min-width);
    min-height: max(Size.medium, i-layout.min-height);
    horizontal-stretch: 1;
    vertical-stretch: 0;

    states [
        disabled when !root.enabled: {
            i-background.background: Palette.surface-disabled;
            i-background.foreground: Palette.foreground-disabled;
        }
        pressed when i-touch-area.pressed: {
            i-background.background:  Palette.surface.darker(State.pressed);
            i-icon.colorize: Palette.foreground.darker(State.pressed);
            i-background.foreground: Palette.foreground.darker(State.pressed);
        }
        hover when i-touch-area.has-hover: {
            i-background.background: Palette.surface.darker(State.hover);
            i-icon.colorize: Palette.foreground.darker(State.hover);
            i-background.foreground: Palette.foreground.darker(State.hover);
        }
    ]

    i-background := Rectangle {
        property <brush> foreground: Palette.foreground;

        border-radius: Radius.small;
        background: Palette.surface;

        animate foreground, background { duration: Duration.fast; }

        i-layout := HorizontalLayout {
            padding-left: Space.medium;
            padding-right: Space.medium;
            spacing: Space.small;

            if (root.current-index >= 0 && root.current-index < root.model.length) : LargeLabel {
                vertical-alignment: center;
                text: root.model[root.current-index].text;
                color: i-background.foreground;
                overflow: elide;
                horizontal-stretch: 1;
                horizontal-alignment: left;
            }

            // placeholder
            if (root.current-index < 0) : LargeLabel {
                text <=> root.placeholder-text;
                vertical-alignment: center;
                color: Palette.border;
                horizontal-stretch: 1;
                horizontal-alignment: left;
                overflow: elide;
            }

            i-icon := Image {
                y: (parent.height - self.height) / 2;
                colorize: i-background.foreground;
                width: Icography.large;
                source: Icons.arrow-drop-down;
            }
        }
    }

    i-touch-area := TouchArea {
        clicked => {
            i-popup.show();
        }

        scroll-event(event) => {
            if (event.delta-y < -root.scroll-delta) {
                root.move-selection-up();
                return accept;
            }

            if (event.delta-y > root.scroll-delta) {
                root.move-selection-down();
                return accept;
            }

            reject
        }

        enabled: root.enabled;
    }

    i-focus-scope := FocusScope {
        key-pressed(event) => {
            if (event.text == Key.UpArrow) {
                root.move-selection-up();
                return accept;
            }

            if (event.text == Key.DownArrow) {
                root.move-selection-down();
                return accept;
            }

            return reject;
        }

        x: 0;
        width: 0px; // Do not react on clicks
        enabled <=> root.enabled;
    }

    if (i-focus-scope.has-focus) : FocusBorder {
        width: root.width + 4px;
        height: root.height + 4px;
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        border-radius: i-background.border-radius + 2px;
    }

    i-popup := Popup {
        x: 0;
        y: i-background.y + i-background.height + Space.small;
        width: i-background.width;

        HorizontalLayout {
            padding: 1px;

            VerticalLayout {
                padding: 4px;

                for item[index] in root.model : ItemDelegate {
                    clicked => {
                        root.select(index);
                    }

                    text: item.text;
                    selected: index == root.current-index;
                }
            }
        }
    }
}