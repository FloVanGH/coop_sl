// SPDX-FileCopyrightText: 2023 Florian Blasius <co-sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Radius, Palette, Typography, Space, State } from "../styling.slint";
import { ScrollView } from "scroll-view.slint";
import { FocusBorder } from "../components.slint";

export component TextEdit {
    in property <TextWrap> wrap <=> i-text-input.wrap;
    in property <TextHorizontalAlignment> horizontal-alignment <=> i-text-input.horizontal-alignment;
    in property <bool> read-only <=> i-text-input.read-only;
    in property <length> font-size <=> i-text-input.font-size;
    in property <bool> enabled <=> i-text-input.enabled;
    out property <length> visible-width <=> i-scroll-view.visible-width;
    out property <length> visible-height <=> i-scroll-view.visible-height;
    in-out property <bool> has-focus: i-text-input.has-focus;
    in-out property <string> text <=> i-text-input.text;
    in-out property <length> viewport-x <=> i-scroll-view.viewport-x;
    in-out property <length> viewport-y <=> i-scroll-view.viewport-y;
    in-out property <length> viewport-width <=> i-scroll-view.viewport-width;
    in-out property <length> viewport-height <=> i-scroll-view.viewport-height;

    callback edited(/* text */ string);

    public function select-all() {
        i-text-input.select-all();
    }

    public function clear-selection() {
        i-text-input.clear-selection();
    }

    public function cut() {
        i-text-input.cut();
    }

    public function copy() {
        i-text-input.copy();
    }

    public function paste() {
        i-text-input.paste();
    }

    forward-focus: i-text-input;
    horizontal-stretch: 1;
    vertical-stretch: 1;

    states [
        disabled when !root.enabled: {
            i-text-input.opacity: State.content-disabled;
        }
    ]

    i-scroll-view := ScrollView {
        VerticalLayout {
            padding: Space.large;

            i-text-input := TextInput {
                cursor-position-changed(cpos) => {
                    if (cpos.x + root.viewport-x < 12px) {
                        root.viewport-x = min(0px, max(i-scroll-view.visible-width - self.width,  - cpos.x + 12px ));
                    } else if (cpos.x + root.viewport-x > i-scroll-view.visible-width - 12px) {
                        root.viewport-x = min(0px, max(i-scroll-view.visible-width - self.width,  i-scroll-view.visible-width - cpos.x - 12px ));
                    }
                    if (cpos.y + root.viewport-y < 12px) {
                        root.viewport-y = min(0px, max(i-scroll-view.visible-height - self.height,  - cpos.y + 12px ));
                    } else if (cpos.y + root.viewport-y > i-scroll-view.visible-height - 12px - 20px) {
                        // FIXME: font-height hardcoded to 20px
                        root.viewport-y = min(0px, max(i-scroll-view.visible-height - self.height,  i-scroll-view.visible-height - cpos.y - 12px - 20px));
                    }
                }

                edited => {
                    root.edited(self.text);
                }

                enabled: true;
                color: Palette.foreground;
                font-size: Typography.large-label.font-size;
                font-weight: Typography.large-label.font-weight;
                selection-background-color: Palette.selection;
                selection-foreground-color: self.color;
                single-line: false;
                wrap: word-wrap;
            }
        }
    }

    if (root.has-focus) : FocusBorder {
        width: 100%;
        height: 100%;
        border-radius: Radius.medium;
    }
}