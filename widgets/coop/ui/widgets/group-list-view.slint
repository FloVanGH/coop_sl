// SPDX-FileCopyrightText: 2022 Florian Blasius <co-sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Size, Space, Radius } from "../styling.slint";
import { GroupListViewItem } from "../structs.slint";
import { SelectionMode } from "../enums.slint";
import { FocusBorder } from "../components.slint";
import { GroupItemDelegate } from "../_internal/delegates.slint";
import { ListView } from "list-view.slint";

export component GroupListView  {
    callback current-item-changed(/* current-item */ { parent: int, item: int });
    callback item-pointer-event(int /* par-row */, int /* item-row */, PointerEvent /* event */, Point /* absolute mouse position */);
    callback key-pressed(/* event */ KeyEvent) -> EventResult;

    in property <[GroupListViewItem]> model;
    in property <SelectionMode> selection-mode: SelectionMode.Single;
    in property <bool> enabled: i-list-view.enabled;
    out property <bool> has-focus: i-focus-scope.has-focus;
    in-out property <{ parent: int, item: int }> current-item;

    forward-focus: i-focus-scope;
    min-width: Size.medium;
    min-height: root.min-width;
    horizontal-stretch: 1;
    vertical-stretch: 1;
    preferred-height: 100%;
    preferred-width: 100%;

    i-focus-scope := FocusScope {
        width: 0px;
        height: 0px;
        enabled: root.enabled;

        key-pressed(event) => {
            if (root.key-pressed(event) == accept) {
                return accept;
            }

            if (root.selection-mode != SelectionMode.Custom) {
                if (event.text == Key.UpArrow) {
                    if (root.current-item.item == 0) {
                        root.set-current-item(root.model[root.current-item.parent - 1].items.length - 1, root.current-item.parent - 1);
                    } else {
                        root.set-current-item(root.current-item.item - 1, root.current-item.parent);
                    }

                    return accept;
                }

                if (event.text == Key.DownArrow) {
                    if (root.current-item.item == root.model[root.current-item.parent].items.length - 1) {
                        root.set-current-item(0, root.current-item.parent + 1);
                    } else {
                        root.set-current-item(root.current-item.item + 1, root.current-item.parent);
                    }

                    return accept;
                }
            }

            reject
        }
    }

    i-background := Rectangle {
        y: Space.small;
        height: parent.height - Space.small;
        border-radius: Radius.medium;
        clip: root.has-focus;

        i-list-view := ListView {
            for parent-item[par-row] in root.model: VerticalLayout {
               GroupItemDelegate {
                    model: parent-item;
                    item-row: par-row;
                    current-item <=> root.current-item;
                    height: self.min-height;
                    selection-mode: root.selection-mode;
                    has-focus: root.has-focus;

                    item-clicked(row) => {
                        root.set-current-item(row, par-row);
                    }

                    item-pointer-event(index, event, position) => {
                        root.item-pointer-event(par-row, index, event, {
                            x: position.x,
                            y: position.y,
                        });
                    }
                }
            }
        }

        @children
    }

    if (root.has-focus) : FocusBorder {
        width: 100%;
        height: 100%;
        border-radius: i-background.border-radius;
    }

    public function set-current-item(row: int, par-row: int) {
        if (row < 0 || par-row < 0 || par-row >= self.model.length || row >= self.model[par-row].items.length
            || self.selection-mode == SelectionMode.Custom) {
            return;
        }

        self.current-item = { item: row, parent: par-row };
        self.current-item-changed(self.current-item);
    }
}