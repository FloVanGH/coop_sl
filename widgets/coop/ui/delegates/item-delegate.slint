// SPDX-FileCopyrightText: 2022 Florian Blasius <co-sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Palette, Duration, Space, Size, State, Icography } from "../styling.slint";
import { LargeLabel } from "../components.slint";
import { LineEdit } from "../widgets/line-edit.slint";
import { ItemDelegateBase } from "item-delegate-base.slint";

export component ItemDelegate inherits ItemDelegateBase {
    in property <bool> highlighted;
    in property <image> leading-icon;
    in property <image> trailing-icon;
    in property <bool> edit;
    in property <string> text;

    callback accepted(/* text*/ string);

    private property <brush> foreground: Palette.foreground;
    private property <brush> icon-color: highlighted ? Palette.primary : Palette.foreground;
    private property <brush> text-color: root.foreground;

    min-height: max(Size.small, i-layout.min-height);
    padding-right: Space.medium;
    padding-left: Space.medium;

    states [
        disabled when !root.enabled: {
            root.text-color: Palette.foreground-disabled;
            root.icon-color: Palette.foreground-disabled;
        }
        pressed when root.pressed: {
            background: Palette.background.darker(State.pressed);
            foreground: Palette.foreground.darker(State.pressed);
            icon-color: highlighted ? Palette.primary.darker(State.pressed) : Palette.foreground.darker(State.pressed);
        }
        selected when root.selected: {
            background: Palette.background.darker(State.selected);
        }
        hover when root.has-hover || root.has-drag-hover: {
            background: Palette.background.darker(State.hover);
            foreground: Palette.foreground.darker(State.hover);
            icon-color: highlighted ? Palette.primary.darker(State.hover) : Palette.foreground.darker(State.hover);
        }
    ]

    animate foreground { duration: Duration.fast; }

    i-layout := HorizontalLayout {
        padding-left: root.padding-left;
        padding-right: root.padding-right;
        spacing: Space.medium;

        if (root.leading-icon.width > 0 && root.leading-icon.height > 0) : Image {
            source: root.leading-icon;
            colorize: root.icon-color;
            width: Icography.small;
        }

        if (!root.edit) : LargeLabel {
            text <=> root.text;
            vertical-alignment: center;
            horizontal-alignment: left;
            color: root.foreground;
            overflow: elide;
        }

        if (root.edit) : LineEdit {
            accepted(text) => {
                root.accepted(text);
            }

            y: (parent.height - self.height) / 2;
            text: root.text;
            height: Size.extra-small;
        }

        if (root.trailing-icon.width > 0 && root.trailing-icon.height > 0) : Image {
            source: root.trailing-icon;
            colorize: root.foreground;
            width: Icography.small;
        }
    }
}