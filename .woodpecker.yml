# SPDX-FileCopyrightText: 2022 Florian Blasius <co_sl@tutanota.com>
# SPDX-License-Identifier: MIT

pipeline:
  lint:
    image: rust
    when:
      event: [push, pull_request, tag]
      branch: main
    commands:
      # need for slint_orbclient build for linux
      - apt-get update && apt-get install -y cmake python3-pip python3-venv
      - python3 -m pip install --user pipx
      - export PATH=$PATH:/root/.local/bin
      # check license
      - pipx run reuse lint
      # check rust fmt
      - rustup component add rustfmt
      - cargo fmt --all -- --check
      # clippy
      - rustup component add clippy
      - cargo clippy --all-targets -- -D warnings
  build_and_test:
    image: rust
    when:
      event: [push, pull_request, tag]
      branch: main
    commands:
      - cargo build
      - cargo test
  build_redox:
    group: build
    image: rust
    when:
      event: [pull_request]
      branch: main
    commands:
      - apt-get update && apt-get install -y -qq build-essential curl fuse libfuse-dev pkg-config qemu-system-x86
      - rustup default nightly
      - cargo install redoxer
      - redoxer toolchain
      - export PKG_CONFIG_SYSROOT_DIR=~/.redoxer/toolchain/bin/x86_64-unknown-redox-gcc
      - redoxer build -p widgets --no-default-features --features slint_orbclient
  build_wasm:
    image: rust
    when:
      event: [pull_request, tag]
      branch: main
    commands:
      - curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - cd examples/widgets
      - sed -i "s/#wasm# //" Cargo.toml
      - wasm-pack build --release --target web
  build_psp:
    image: rust
    when:
      event: [push, pull_request, tag]
      branch: main
    commands:
      - rustup default nightly-2022-06-11
      - cargo install -p cargo-psp --git https://github.com/overdrivenpotato/rust-psp --rev d6a5c5758aa9a8fff9511c48328ffd3cfbd25a18 
      - cd examples/widgets_psp
      - cargo psp
  
  # deploy
  deploy_docs:
    group: deploy
    image: rust
    when:
      event: [push]
      branch: main
    secrets: [ mail, codeberg_token ]
    environment:
      - OUTPUT=target/doc
    commands:
      # co_widgets doc
      - cargo doc --no-deps -p co_widgets
      # slint_orbclient doc
      - cargo doc --no-deps -p slint_orbclient
      # Git configuration
      - git config --global user.email $MAIL
      - git config --global user.name "Woodpecker CI"
      - git clone -b main https://$CODEBERG_TOKEN@codeberg.org/flovansl/pages.git /tmp/pages/
      # Copy build step output to repository folder
      - cp -ar $OUTPUT/* /tmp/pages/snapshots/docs/
     
      # Commit and push all static files with pipeline started timestamp
      - cd /tmp/pages/
      - git add .
      - |-
        CHANGES=$(git status --porcelain | wc -l)

        if [ "$CHANGES" -gt "0" ]; then
          git status
          git commit -m "Woodpecker CI ${CI_BUILD_CREATED} [CI SKIP]"
          git push
        fi
  deploy_redox:
    group: deploy
    image: rust
    when:
      event: [push]
      branch: main
    secrets: [ mail, codeberg_token ]
    environment:
      - OUTPUT=target/x86_64-unknown-redox/release
    commands:
      - apt-get update && apt-get install -y -qq build-essential curl fuse libfuse-dev pkg-config qemu-system-x86
      - rustup default nightly
      - cargo install redoxer
      - redoxer toolchain
      - export PKG_CONFIG_SYSROOT_DIR=~/.redoxer/toolchain/bin/x86_64-unknown-redox-gcc
      - redoxer build -p widgets --no-default-features --features slint_orbclient --release

       # Git configuration
      - git config --global user.email $MAIL
      - git config --global user.name "Woodpecker CI"
      - git clone -b main https://$CODEBERG_TOKEN@codeberg.org/flovansl/pages.git /tmp/pages/
      # Copy build step output to repository folder
      - cp -a $OUTPUT/widgets /tmp/pages/snapshots/redox/
     
      # Commit and push all static files with pipeline started timestamp
      - cd /tmp/pages/
      - git add .
      - |-
        CHANGES=$(git status --porcelain | wc -l)

        if [ "$CHANGES" -gt "0" ]; then
          git status
          git commit -m "Woodpecker CI ${CI_BUILD_CREATED} [CI SKIP]"
          git push
        fi 
  deploy_wasm:
    image: rust
    when:
      event: [push]
      branch: main
    secrets: [ mail, codeberg_token ]
    environment:
      - OUTPUT_WIDGETS=examples/widgets
      - OUTPUT_CHAT=app/co_chat
    commands:
      - curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      # Git configuration
      - git config --global user.email $MAIL
      - git config --global user.name "Woodpecker CI"
      - git clone -b main https://$CODEBERG_TOKEN@codeberg.org/flovansl/pages.git /tmp/pages/

      # widgets example
      - cd $OUTPUT_WIDGETS
      - sed -i "s/#wasm# //" Cargo.toml
      - wasm-pack build --release --target web
    
      # Copy build step output to repository folder
      - cp -ar pkg/* /tmp/pages/snapshots/widgets/pkg/
      - cp index.html /tmp/pages/snapshots/widgets/

      # # co_chat
      # - cd ../../$OUTPUT_CHAT
      # - sed -i "s/#wasm# //" Cargo.toml
      # - wasm-pack build --release --target web
    
      # # Copy build step output to repository folder
      # - cp -ar pkg/* /tmp/pages/snapshots/widgets/pkg/
      # - cp index.html /tmp/pages/snapshots/widgets/
     
      # Commit and push all static files with pipeline started timestamp
      - cd /tmp/pages/
      - git add .
      - |-
        CHANGES=$(git status --porcelain | wc -l)

        if [ "$CHANGES" -gt "0" ]; then
          git status
          git commit -m "Woodpecker CI ${CI_BUILD_CREATED} [CI SKIP]"
          git push
        fi

# todo: pico build test