// SPDX-FileCopyrightText: 2023 Florian Blasius <co_sl@tutanota.com>
// SPDX-License-Identifier: GPL-3.0-only

import { Duration, Space, LargeTitle, Palette, Radius } from "@coop/lib.slint";

export global LauncherStyle {
    out property <length> max-item-size: 132px;
    out property <length> item-size: 94px;
}

component LauncherItemDelegate  {
    callback clicked <=> touch-area.clicked;
    callback pointer-event <=> touch-area.pointer-event;

    in property <bool> selected: false;
    in property <image> image <=> i-image.source;
    out property <length> mouse-x <=> touch-area.mouse-x;
    out property <length> mouse-y <=> touch-area.mouse-y;

    width: root.selected ? LauncherStyle.max-item-size : LauncherStyle.item-size;
    height: self.width;

    touch-area := TouchArea {}

    i-background := Rectangle {
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        width: parent.width - 4px;
        height: parent.height - 4px;
        border-width: root.selected ? 0px : 1px;
        border-color:  Palette.border;
        background: root.selected ? Palette.accent : Palette.surface;
        border-radius: 24px;
        clip: true;

        i-image := Image {
            width: 90%;
            height: 90%;
        }
    }

    animate width { duration: Duration.slow; easing: cubic-bezier(0.05, 0.7, 0.1, 1.0); }
}

export struct LauncherItem {
    text: string,
    image: image
}

export component Launcher inherits Rectangle {
    private property <length> start-x: 0;
    private property <length> spacing: Space.large;
    private property <length> item-width: LauncherStyle.item-size;

    callback launch(/* index */ int);
    callback current-item-changed(/* current-item */ int);
    callback item-pointer-event(/* row */ int, /* event */ PointerEvent, /* absolute mouse position */ Point);

    in property <[LauncherItem]> model;
    out property <bool> has-focus: i-focus-scope.has-focus;
    in-out property <int> current-item;

    forward-focus: i-focus-scope;
    min-height: max(LauncherStyle.max-item-size + Space.large, i-layout.min-height);

    i-focus-scope := FocusScope {
        key-pressed(event) => {
            if (event.text == Key.RightArrow) {
                root.next();
                return accept;
            }

            if (event.text == Key.LeftArrow) {
                root.previous();
                return accept;
            }

            if (event.text == Key.Return) {
                root.launch(root.current-item);
                return accept;
            }

            return reject;
        }
    }

    TouchArea {
        width: parent.width;
        height: parent.height;

        clicked => {
            i-focus-scope.focus()
        }
    }

    i-background := Rectangle {
        border-radius: Radius.medium;
        clip: true;
        background: transparent;
        x: Space.large;
        y: Space.large;
        width: parent.width - 2 * Space.large;
        height: parent.height - Space.large;

        Flickable {
            interactive: false;
            viewport-x: root.start-x - root.current-item * (root.item-width + root.spacing);

            i-layout := HorizontalLayout {
                spacing <=> root.spacing;

                for item[index] in root.model : LauncherItemDelegate {
                    image: item.image;
                    selected: index == root.current-item;

                    clicked => {
                        if(index != root.current-item) {
                            root.focus();
                            root.set-current-item(index);
                        } else {
                            root.launch(root.current-item);
                        }
                    }

                    pointer-event(pe) => {
                        root.item-pointer-event(index, pe, {
                            x: self.absolute-position.x + self.mouse-x - root.absolute-position.x,
                            y: self.absolute-position.y + self.mouse-y - root.absolute-position.y,
                        });
                    }
                }
            }

            animate viewport-x { duration: Duration.slow; easing: cubic-bezier(0.05, 0.7, 0.1, 1.0);  }
        }
    }

    function set-current-item(index: int) {
        root.current-item = max(min(index, root.model.length - 1), 0);

        if(root.current-item == index) {
            root.current-item-changed(root.current-item);
        }
    }

    function next() {
        root.set-current-item(root.current-item + 1);
    }

    function previous() {
        root.set-current-item(root.current-item - 1);
    }
}