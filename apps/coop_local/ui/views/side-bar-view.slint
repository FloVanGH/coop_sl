// SPDX-FileCopyrightText: 2023 Florian Blasius <co_sl@tutanota.com>
// SPDX-License-Identifier: GPL-3.0-only

import { SideBar, GroupListView, GroupListViewItem, ContextMenu, ListViewItem, Icons } from "../_imports/coop-widgets.slint";

export global SideBarAdapter {
    private property <[ListViewItem]> dummy-context-menu: [
        { text: "Remove" },
    ];

    callback open(/* parent */ int, /* item */ int);
    callback add-bookmark(/* path */ string);
    callback get-context-menu(/* parent */ int, /* file */ int) -> [ListViewItem];
    callback context-menu-action(/* parent */ int, /* file */ int, /* action */ string);

    in property <[GroupListViewItem]> bookmarks: [
        {
            text: "Bookmarks",
            items: [
                { leading-icon: Icons.folder, text: "Home", highlighted: true },
                { leading-icon: Icons.folder, text: "Music", highlighted: true },
            ]
        },
        {
            text: "Locations",
            items: [
                { leading-icon: Icons.computer, text: "Root", highlighted: true },
                { leading-icon: Icons.folder, text: "My Phone", highlighted: true },
            ]
        },
    ];
    in-out property <{ parent: int, item: int }> current-bookmark;

    // only used for preview
    get-context-menu => {
        dummy-context-menu
     }
}

export component SideBarView inherits SideBar {
    private property <length> context-menu-x;
    private property <length> context-menu-y;
    private property <[ListViewItem]> context-menu-model;
    private property <int> context-menu-parent-index;
    private property <int> context-menu-item-index;

    GroupListView {
        vertical-stretch: 1;
        model: SideBarAdapter.bookmarks;
        current-item <=> SideBarAdapter.current-bookmark;

        current-item-changed(current-item) => {
            root.expanded = false;
            SideBarAdapter.open(current-item.parent, current-item.item);
         }

         item-pointer-event(parent-index, index, evt, pos) => {
            if (evt.kind == PointerEventKind.up && evt.button == PointerEventButton.right) {
                root.context-menu-model = SideBarAdapter.get-context-menu(parent-index, index);

                if(root.context-menu-model.length == 0) {
                    return;
                }
                root.context-menu-x = pos.x;
                root.context-menu-y = pos.y;
                root.context-menu-parent-index = parent-index;
                root.context-menu-item-index = index;
                i-context-menu.show();
            }
        }

         i-context-menu := PopupWindow {
            x: root.context-menu-x;
            y: root.context-menu-y;

            ContextMenu {
                model: root.context-menu-model;

                item-clicked(index) => {
                    SideBarAdapter.context-menu-action(root.context-menu-parent-index, root.context-menu-item-index, self.model[index].spec);
                }
            }
        }
    }
}