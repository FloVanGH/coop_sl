// SPDX-FileCopyrightText: 2023 Florian Blasius <co_sl@tutanota.com>
// SPDX-License-Identifier: GPL-3.0-only

import { ListViewItem, StandardListView, Icons, HeaderBar, SelectionMode, ContextMenu,
    RoundButton, LoadingIndicator, Size, Space } from "../_imports/coop-widgets.slint";


export global FilesAdapter {
    callback back();
    callback open-internal(/* row */ int);
    callback get-context-menu() -> [ListViewItem];
    callback context-menu-action(/* spec */ string);
    callback get-item-context-menu(/* row */ int) -> [ListViewItem];
    callback item-context-menu-action(/* row */ int, /* spec */ string);
    callback rename-item(/* row */ int, /* text */ string);
    callback update-selection(/* row */ int, /* control */ bool);
    callback select-next() -> int;
    callback select-previous() -> int;
    callback select-all();
    callback copy();
    callback paste();
    callback selected-items() -> [int];

    in property <string> title: "Root";
    in property <[ListViewItem]> files;
    in property <bool> back-enabled;
    in property <int> edit-file: -1;
    in property <bool> loading;
}

export component FilesView {
    private property <[int]> selected-items;
    private property <int> last-selected-item: selected-items[selected-items.length - 1];
    private property <[ListViewItem]> context-menu;
    private property <[ListViewItem]> item-context-menu;
    private property <Point> item-context-menu-pos;
    private property <int> item-context-menu-item-row;
    private property <float> display-loading;

    in property <length> window-height;

    i-focus-scope := FocusScope {
        width: 0;
        height: 0;

        key-pressed(e) => {
           root.key-pressed(e)
        }
    }

    VerticalLayout {
        HeaderBar {
            action-icon: Icons.arrow-back;
            action-enabled: FilesAdapter.back-enabled;
            title: FilesAdapter.title;

            i-menu-button := RoundButton {
                icon: Icons.more-vert;
                horizontal-stretch: 0;

                clicked => {
                    root.context-menu = FilesAdapter.get-context-menu();

                    if (root.context-menu.length == 0) {
                        return;
                    }

                    i-context-menu.show();
                }
            }

            action => {
                FilesAdapter.back();
            }

            i-context-menu := PopupWindow {
                x: i-menu-button.x - (128px - i-menu-button.width);
                y: i-menu-button.y + i-menu-button.height;

                ContextMenu {
                    min-width: 128px;
                    model: root.context-menu;

                    item-clicked(row) => {
                        FilesAdapter.context-menu-action(self.model[row].spec);
                    }
                }
            }
        }

        i-list-view := StandardListView {
            model: FilesAdapter.files;
            selection-mode: SelectionMode.Custom;
            edit-item: FilesAdapter.edit-file;

            key-pressed(event) => {
                if (event.text == Key.Return) {
                    root.selected-items = FilesAdapter.selected-items();

                    if (root.selected-items.length > 0) {
                        FilesAdapter.open-internal(root.last-selected-item);
                    }

                    return accept;
                }

                if (event.text == " ") {
                    root.selected-items = FilesAdapter.selected-items();

                    if (root.selected-items.length > 0) {
                        root.open-item-context-menu(root.last-selected-item, { x: Space.medium, y: self.item-y(root.last-selected-item) })
                    }

                    return accept;
                }

                if (event.text == Key.UpArrow) {
                    i-list-view.bring-into-view(FilesAdapter.select-previous());
                    return accept;
                }

                if (event.text == Key.DownArrow) {
                    i-list-view.bring-into-view(FilesAdapter.select-next());
                    return accept;
                }

                root.key-pressed(event)
            }

            item-pointer-event(row, event, position) => {
                i-focus-scope.focus();

                if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down && !event.modifiers.control
                        && !event.modifiers.shift) {
                    FilesAdapter.open-internal(row);
                    return;
                }

                if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down && (event.modifiers.control
                        || event.modifiers.shift)) {
                    FilesAdapter.update-selection(row, event.modifiers.control);
                    return;
                }

                if (event.button == PointerEventButton.right && event.kind == PointerEventKind.up) {
                    root.open-item-context-menu(row, position);
                }
            }

            item-accepted(row, text) => {
                FilesAdapter.rename-item(row, text);
            }

            i-item-context-menu := PopupWindow {
                x: root.item-context-menu-pos.x;
                y: root.item-context-menu-pos.y;

                ContextMenu {
                    model: root.item-context-menu;

                    item-clicked(row) => {
                        FilesAdapter.item-context-menu-action(root.item-context-menu-item-row, self.model[row].spec);
                    }
                }
            }
        }
    }

    if (root.display-loading >= 1.0) : LoadingIndicator {
        width: 100%;
        height: 100%;
    }

    function key-pressed(event: KeyEvent) -> EventResult {
        if (event.text == Key.Escape) {
            i-context-menu.close();
            i-item-context-menu.close();
            return accept;
        }
        if (event.text == "a" && event.modifiers.control) {
            FilesAdapter.select-all();
            return accept;
        }

        if (event.text == "c" && event.modifiers.control) {
            FilesAdapter.copy();
        }

        if (event.text == "v" && event.modifiers.control) {
            FilesAdapter.paste();
        }

        reject
    }

    function open-item-context-menu(row: int, position: Point) {
        root.item-context-menu = FilesAdapter.get-item-context-menu(row);
        if (root.item-context-menu.length == 0) {
            return;
        }

        root.item-context-menu-item-row = row;
        root.item-context-menu-pos.x = position.x;

        // FIXME: remove this hacky workaround after there is a solution for slint winit PopupWindows
        root.item-context-menu-pos.y = Size.large + position.y + root.item-context-menu.length * Size.small > root.window-height ?
            position.y + root.window-height - (Size.large + position.y + root.item-context-menu.length * Size.small) : position.y;
        i-item-context-menu.show();
    }

    states [
        loading when FilesAdapter.loading : {
            display-loading: 1.0;

            in {
                animate display-loading { duration: 500ms; }
            }
        }
    ]
}