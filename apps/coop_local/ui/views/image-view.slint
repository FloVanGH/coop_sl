// SPDX-FileCopyrightText: 2023 Florian Blasius <co_sl@tutanota.com>
// SPDX-License-Identifier: GPL-3.0-only

import { ScrollView, RoundButton, ContextMenu, LoadingIndicator, RoundButton } from "../_imports/coop_widgets/widgets.slint";
import { FocusBorder } from "../_imports/coop_widgets/components.slint";
import { Space, Palette, Radius, Icons } from "../_imports/coop_widgets/styling.slint";
import { HeaderBar, ControlBar } from "../_imports/coop_widgets/building-blocks.slint";
import { ListViewItem } from "../_imports/coop_widgets/structs.slint";

export global ImageAdapter {
    callback back();
    callback get-context-menu() -> [ListViewItem];
    callback context-menu-action(/* spec */ string);
    callback previous();
    callback next();

    in property <image> image;
    in property <string> title;
    in property <bool> loading;
    in property <bool> single-image;
}

export component ImageView {
    private property <float> display-loading;
    private property <bool> image-loaded: ImageAdapter.image.width > 0 && ImageAdapter.image.height > 0;

    VerticalLayout {
        i-header-bar := HeaderBar {
            action-icon: Icons.arrow-back;
            action-enabled: true;
            title: ImageAdapter.title;

            i-menu-button := RoundButton {
                icon: Icons.more-vert;
                horizontal-stretch: 0;

                clicked => {
                    i-context-menu.model = ImageAdapter.get-context-menu();

                    if (i-context-menu.model.length == 0) {
                        return;
                    }

                    i-context-menu.show();
                }
            }

            action => {
                ImageAdapter.back();
            }

            i-context-menu := ContextMenu {
                min-menu-width: 94px;
                offset-x: -self.min-menu-width;
                offset-y: i-menu-button.height;

                item-clicked(row) => {
                    ImageAdapter.context-menu-action(self.model[row].spec);
                }
            }
        }

        Rectangle {
            vertical-stretch: 1;

            i-focus-scope := FocusScope {
                enabled: !ImageAdapter.single-image;

                key-pressed(event) => {
                    if (event.text == Key.RightArrow) {
                        ImageAdapter.next();
                        return accept;
                    }

                    if (event.text == Key.LeftArrow) {
                        ImageAdapter.previous();
                        return accept;
                    }

                    reject
                }
            }

            VerticalLayout {
                alignment: start;
                padding: Space.large;
                vertical-stretch: 1;

                if (root.image-loaded) : Rectangle {
                    clip: true;
                    border-radius: Radius.medium;

                    VerticalLayout {
                        padding: Space.small;

                        i-image := Image {
                            source: ImageAdapter.image;
                        }
                    }

                    if (i-focus-scope.has-focus) : FocusBorder {
                        width: 100%;
                        height: 100%;
                        border-radius: parent.border-radius;
                    }
                }
            }
        }

        if (!root.image-loaded) : Rectangle {
            vertical-stretch: 1;
        }

        if (!ImageAdapter.single-image) : ControlBar {
            RoundButton {
                icon: Icons.arrow-back;

                clicked => {
                    ImageAdapter.previous();
                }
            }

            RoundButton {
                icon: Icons.arrow-forward;

                clicked => {
                    ImageAdapter.next();
                }
            }
        }
    }

    if (root.display-loading >= 1.0) : LoadingIndicator {
        width: 100%;
        height: 100%;
    }

    states [
        loading when ImageAdapter.loading : {
            display-loading: 1.0;

            in {
                animate display-loading { duration: 500ms; }
            }
        }
    ]
}