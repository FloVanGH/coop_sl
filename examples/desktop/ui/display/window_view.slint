// SPDX-FileCopyrightText: 2022 Florian Blasius <co_sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { SmallTitle, RoundButton, Spacer, Theme, mi } from "../_imports/coop_widgets.slint";

component WindowButton inherits RoundButton {
    height: Theme.sizes.extra-small;
    width: Theme.sizes.extra-small;
    horizontal-stretch: 0;
}

// `WindowView` represents a frame buffer based window that is drawn and handeld by `DisplayView`.
export component WindowView inherits Rectangle {
    // Received when a button was pressed or released on the window.
    callback pointer_event(length, length, PointerEvent);

    // Recived when key is pressed.
    pure callback key_pressed_event <=> i_focus_scope.key_pressed;

    // Recived when key is released.
    pure callback key_released_event <=> i_focus_scope.key_released;

    // Called when the window wants to be moved.
    callback move(length, length);

    // Request to close the window.accessible-delegate-focus.
    callback close <=> i_close_button.clicked;

    // Request to show the window on front.
    callback bring_to_front <=> i_header_touch_area.clicked;

    // Reference to the frame buffer.
    in-out property <image> buffer <=> i_canvas.source;

    // Defines the width of the window without border.
    in-out property <length> inner_width;
    
    // Defines the height of the window without border.
    in-out property <length> inner_height;

    // Gets the current mouse x position on the window.
    in-out property <length> mouse_x: i_pointer.mouse_x;

    // Gets the current mouse y position on the window.
    in-out property <length> mouse_y: i_pointer.mouse_y;

    // Defines the window title.
    in-out property <string> title <=> i_title.text;

    // privates
    in-out property <length> header_height: Theme.sizes.small;
    in-out property <length> window_padding: 1px;

    width: root.inner_width + 2 * root.window_padding;
    height: root.header_height + root.inner_height + root.window_padding;
    border-radius: Theme.radius.small;
    background: Theme.brushes.background-alt; 
    clip: true;

    i_header := Rectangle {  
        y:0;  
        width: 100%;
        height: root.header_height;

        // header move touch area
        i_header_touch_area := TouchArea {
            moved => {
                if (self.pressed) {
                    root.move(root.x + self.mouse_x - self.pressed_x, root.y + self.mouse_y - self.pressed_y);
                }
            }
        }

        HorizontalLayout {  
            padding-left: Theme.spaces.small;
            padding-right: Theme.spaces.small;

            Spacer {}

            i_title := SmallTitle {  
                vertical-alignment: center;
                horizontal-alignment: center;
                color: white;
            }

            Spacer {}

            i_close_button := WindowButton {  
                y: (parent.height - self.height) / 2;
                text: mi.close;
            }
        }

        Rectangle {
            width: 100%;
            y: parent.height - self.height;
            height: 1px;
            background: Theme.brushes.border;
        }
    }

    i_inner := Rectangle {
        x: root.window_padding;
        y: i_header.height;
        width: root.inner-width;
        height: root.inner-height;
        background: Theme.brushes.background;
        border_radius: root.border_radius - 1px;

        Rectangle {  
            y:0;  
            width: 100%;
            height: parent.border_radius;
            background: root.background;
        }

        // window touch area.
        i_pointer := TouchArea {
            clicked => { i_focus_scope.focus(); }
            pointer_event(event) => {  
                root.pointer-event(self.mouse_x, self.mouse_y, event);
            }
        }

        i_focus_scope := FocusScope {
            x:0;
            width: 0px;
        }

        i_canvas := Image {
            width: 100%;
            height: 100%;
        }
    }
}

