// SPDX-FileCopyrightText: 2022 Florian Blasius <co-sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { WindowModel } from "window-model.slint";
import { WindowView } from "window-view.slint";
import { Button } from "../_imports/coop_widgets.slint";

export global DisplayViewAdapter  {
    callback open(string);

    callback pointer-event(string, length, length, PointerEvent);

    callback key-pressed-event(string, KeyEvent);

    callback key-released-event(string, KeyEvent);

    callback bring-to-front(string);

    callback close(string);

    callback close-all();

    // property WindowModel front-window:

    in-out property <[WindowModel]> window-models;

    in-out property <string> front-key: root.window-models.length - 1 >= 0 ? root.window-models[root.window-models.length - 1].key : "";

    in-out property <string> front-path: root.window-models.length - 1 >= 0 ? root.window-models[root.window-models.length - 1].path : "";
}

// `DisplayView` draws and handles windows.
export component DisplayView inherits Rectangle {
    // Open a window with the given binary path.
    callback open <=> DisplayViewAdapter.open;

    // Closes the given window.
    callback close <=> DisplayViewAdapter.close;

    // Resizes the given window to the given size.
    callback resize(WindowModel, length, length);

    // Sends a pointer event to the client.
    callback pointer-event <=> DisplayViewAdapter.pointer-event;

    callback key-pressed-event <=> DisplayViewAdapter.key-pressed-event;

    callback key-released-event <=> DisplayViewAdapter.key-released-event;

    callback bring-to-front <=> DisplayViewAdapter.bring-to-front;

    // The list of window window-models.
    in-out property <[WindowModel]> window-models <=> DisplayViewAdapter.window-models;

    Rectangle {
        for client[index] in root.window-models : WindowView {
            x: client.x;
            y: client.y;
            inner-width: client.width;
            inner-height: client.height;
            buffer: client.buffer;
            title: client.title;

            bring-to-front => {
                root.bring-to-front(client.key);
            }

            pointer-event(x, y, e) => {
                root.pointer-event(client.key, self.x, self.y, e);
            }

            key-pressed-event(e) => {
                root.key-pressed-event(client.key, e);
                accept
            }

            key-released-event(e) => {
                root.key-released-event(client.key, e);
                accept
            }

            move(x, y) => {
                client.x = max(0px, min(self.x, root.width - self.width));
                client.y = max(0px, min(self.y, root.height - self.height));
            }

            close => {
                root.close(client.key);
            }
        }
    }
}