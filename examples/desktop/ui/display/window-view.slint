// SPDX-FileCopyrightText: 2022 Florian Blasius <co_sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { SmallTitle, RoundButton, Spacer, Palette, Size, Space, Radius } from "@coop/lib.slint";

component WindowButton inherits RoundButton {
    height: Size.extra-small;
    width: Size.extra-small;
    horizontal-stretch: 0;
}

// `WindowView` represents a frame buffer based window that is drawn and handeld by `DisplayView`.
export component WindowView inherits Rectangle {
    in-out property <image> buffer <=> i-canvas.source;
    in-out property <length> inner-width;
    in-out property <length> inner-height;
    in-out property <length> mouse-x: i-pointer.mouse-x;
    in-out property <length> mouse-y: i-pointer.mouse-y;
    in-out property <string> title <=> i-title.text;

    callback pointer-event(length, length, PointerEvent);
    callback key-pressed-event <=> i-focus-scope.key-pressed;
    callback key-released-event <=> i-focus-scope.key-released;
    callback move(length, length);
    callback close <=> i-close-button.clicked;
    callback bring-to-front <=> i-header-touch-area.clicked;

    private property <length> header-height: Size.small;
    private property <length> window-padding: 1px;

    width: root.inner-width + 2 * root.window-padding;
    height: root.header-height + root.inner-height + root.window-padding;
    border-radius: Radius.small;
    background: Palette.background-alt;
    clip: true;

    i-header := Rectangle {
        y:0;
        width: 100%;
        height: root.header-height;

        // header move touch area
        i-header-touch-area := TouchArea {
            moved => {
                if (self.pressed) {
                    root.move(root.x + self.mouse-x - self.pressed-x, root.y + self.mouse-y - self.pressed-y);
                }
            }
        }

        HorizontalLayout {
            padding-left: Space.small;
            padding-right: Space.small;

            Spacer {}

            i-title := SmallTitle {
                vertical-alignment: center;
                horizontal-alignment: center;
                color: white;
            }

            Spacer {}

            i-close-button := WindowButton {
                y: (parent.height - self.height) / 2;
                // text: mi.close;
            }
        }

        Rectangle {
            width: 100%;
            y: parent.height - self.height;
            height: 1px;
            background: Palette.border;
        }
    }

    i-inner := Rectangle {
        x: root.window-padding;
        y: i-header.height;
        width: root.inner-width;
        height: root.inner-height;
        background: Palette.background;
        border-radius: root.border-radius - 1px;

        Rectangle {
            y:0;
            width: 100%;
            height: parent.border-radius;
            background: root.background;
        }

        // window touch area.
        i-pointer := TouchArea {
            clicked => { i-focus-scope.focus(); }
            pointer-event(event) => {
                root.pointer-event(self.mouse-x, self.mouse-y, event);
            }
        }

        i-focus-scope := FocusScope {
            x:0;
            width: 0px;
        }

        i-canvas := Image {
            width: 100%;
            height: 100%;
        }
    }
}

